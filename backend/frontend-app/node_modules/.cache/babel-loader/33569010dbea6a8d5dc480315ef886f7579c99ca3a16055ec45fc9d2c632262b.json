{"ast":null,"code":"var _possibleConstructorReturn = require(\"C:/Users/hp/Downloads/video_player_uploader-master/backend/frontend-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\").default;\nvar _assertThisInitialized = require(\"C:/Users/hp/Downloads/video_player_uploader-master/backend/frontend-app/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"C:/Users/hp/Downloads/video_player_uploader-master/backend/frontend-app/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/hp/Downloads/video_player_uploader-master/backend/frontend-app/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createClass = require(\"C:/Users/hp/Downloads/video_player_uploader-master/backend/frontend-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"C:/Users/hp/Downloads/video_player_uploader-master/backend/frontend-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n/*! @name videojs-contrib-quality-levels @version 4.0.0 @license Apache-2.0 */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('video.js')) : typeof define === 'function' && define.amd ? define(['video.js'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.videojsContribQualityLevels = factory(global.videojs));\n})(this, function (videojs) {\n  'use strict';\n\n  function _interopDefaultLegacy(e) {\n    return e && typeof e === 'object' && 'default' in e ? e : {\n      'default': e\n    };\n  }\n  var videojs__default = /*#__PURE__*/_interopDefaultLegacy(videojs);\n\n  /**\n   * A single QualityLevel.\n   *\n   * interface QualityLevel {\n   *   readonly attribute DOMString id;\n   *            attribute DOMString label;\n   *   readonly attribute long width;\n   *   readonly attribute long height;\n   *   readonly attribute long bitrate;\n   *            attribute boolean enabled;\n   * };\n   *\n   * @class QualityLevel\n   */\n  var QualityLevel = /*#__PURE__*/_createClass(\n  /**\n   * Creates a QualityLevel\n   *\n   * @param {Representation|Object} representation The representation of the quality level\n   * @param {string}   representation.id        Unique id of the QualityLevel\n   * @param {number=}  representation.width     Resolution width of the QualityLevel\n   * @param {number=}  representation.height    Resolution height of the QualityLevel\n   * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n   * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\n   * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n   */\n  function QualityLevel(representation) {\n    _classCallCheck(this, QualityLevel);\n    var level = this; // eslint-disable-line\n\n    level.id = representation.id;\n    level.label = level.id;\n    level.width = representation.width;\n    level.height = representation.height;\n    level.bitrate = representation.bandwidth;\n    level.frameRate = representation.frameRate;\n    level.enabled_ = representation.enabled;\n    Object.defineProperty(level, 'enabled', {\n      /**\n       * Get whether the QualityLevel is enabled.\n       *\n       * @return {boolean} True if the QualityLevel is enabled.\n       */\n      get: function get() {\n        return level.enabled_();\n      },\n      /**\n       * Enable or disable the QualityLevel.\n       *\n       * @param {boolean} enable true to enable QualityLevel, false to disable.\n       */\n      set: function set(enable) {\n        level.enabled_(enable);\n      }\n    });\n    return level;\n  });\n  /**\n   * A list of QualityLevels.\n   *\n   * interface QualityLevelList : EventTarget {\n   *   getter QualityLevel (unsigned long index);\n   *   readonly attribute unsigned long length;\n   *   readonly attribute long selectedIndex;\n   *\n   *   void addQualityLevel(QualityLevel qualityLevel)\n   *   void removeQualityLevel(QualityLevel remove)\n   *   QualityLevel? getQualityLevelById(DOMString id);\n   *\n   *   attribute EventHandler onchange;\n   *   attribute EventHandler onaddqualitylevel;\n   *   attribute EventHandler onremovequalitylevel;\n   * };\n   *\n   * @extends videojs.EventTarget\n   * @class QualityLevelList\n   */\n  var QualityLevelList = /*#__PURE__*/function (_videojs__default$def) {\n    _inherits(QualityLevelList, _videojs__default$def);\n    var _super = _createSuper(QualityLevelList);\n    /**\n     * Creates a QualityLevelList.\n     */\n    function QualityLevelList() {\n      var _this;\n      _classCallCheck(this, QualityLevelList);\n      _this = _super.call(this);\n      var list = _assertThisInitialized(_this); // eslint-disable-line\n\n      list.levels_ = [];\n      list.selectedIndex_ = -1;\n      /**\n       * Get the index of the currently selected QualityLevel.\n       *\n       * @returns {number} The index of the selected QualityLevel. -1 if none selected.\n       * @readonly\n       */\n\n      Object.defineProperty(list, 'selectedIndex', {\n        get: function get() {\n          return list.selectedIndex_;\n        }\n      });\n      /**\n       * Get the length of the list of QualityLevels.\n       *\n       * @returns {number} The length of the list.\n       * @readonly\n       */\n\n      Object.defineProperty(list, 'length', {\n        get: function get() {\n          return list.levels_.length;\n        }\n      });\n      list[Symbol.iterator] = function () {\n        return list.levels_.values();\n      };\n      return _possibleConstructorReturn(_this, list);\n    }\n    /**\n     * Adds a quality level to the list.\n     *\n     * @param {Representation|Object} representation The representation of the quality level\n     * @param {string}   representation.id        Unique id of the QualityLevel\n     * @param {number=}  representation.width     Resolution width of the QualityLevel\n     * @param {number=}  representation.height    Resolution height of the QualityLevel\n     * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n     * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\n     * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n     * @return {QualityLevel} the QualityLevel added to the list\n     * @method addQualityLevel\n     */\n    _createClass(QualityLevelList, [{\n      key: \"addQualityLevel\",\n      value: function addQualityLevel(representation) {\n        var qualityLevel = this.getQualityLevelById(representation.id); // Do not add duplicate quality levels\n\n        if (qualityLevel) {\n          return qualityLevel;\n        }\n        var index = this.levels_.length;\n        qualityLevel = new QualityLevel(representation);\n        if (!('' + index in this)) {\n          Object.defineProperty(this, index, {\n            get: function get() {\n              return this.levels_[index];\n            }\n          });\n        }\n        this.levels_.push(qualityLevel);\n        this.trigger({\n          qualityLevel: qualityLevel,\n          type: 'addqualitylevel'\n        });\n        return qualityLevel;\n      }\n      /**\n       * Removes a quality level from the list.\n       *\n       * @param {QualityLevel} qualityLevel The QualityLevel to remove from the list.\n       * @return {QualityLevel|null} the QualityLevel removed or null if nothing removed\n       * @method removeQualityLevel\n       */\n    }, {\n      key: \"removeQualityLevel\",\n      value: function removeQualityLevel(qualityLevel) {\n        var removed = null;\n        for (var i = 0, l = this.length; i < l; i++) {\n          if (this[i] === qualityLevel) {\n            removed = this.levels_.splice(i, 1)[0];\n            if (this.selectedIndex_ === i) {\n              this.selectedIndex_ = -1;\n            } else if (this.selectedIndex_ > i) {\n              this.selectedIndex_--;\n            }\n            break;\n          }\n        }\n        if (removed) {\n          this.trigger({\n            qualityLevel: qualityLevel,\n            type: 'removequalitylevel'\n          });\n        }\n        return removed;\n      }\n      /**\n       * Searches for a QualityLevel with the given id.\n       *\n       * @param {string} id The id of the QualityLevel to find.\n       * @return {QualityLevel|null} The QualityLevel with id, or null if not found.\n       * @method getQualityLevelById\n       */\n    }, {\n      key: \"getQualityLevelById\",\n      value: function getQualityLevelById(id) {\n        for (var i = 0, l = this.length; i < l; i++) {\n          var level = this[i];\n          if (level.id === id) {\n            return level;\n          }\n        }\n        return null;\n      }\n      /**\n       * Resets the list of QualityLevels to empty\n       *\n       * @method dispose\n       */\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.selectedIndex_ = -1;\n        this.levels_.length = 0;\n      }\n    }]);\n    return QualityLevelList;\n  }(videojs__default['default'].EventTarget);\n  /**\n   * change - The selected QualityLevel has changed.\n   * addqualitylevel - A QualityLevel has been added to the QualityLevelList.\n   * removequalitylevel - A QualityLevel has been removed from the QualityLevelList.\n   */\n  QualityLevelList.prototype.allowedEvents_ = {\n    change: 'change',\n    addqualitylevel: 'addqualitylevel',\n    removequalitylevel: 'removequalitylevel'\n  }; // emulate attribute EventHandler support to allow for feature detection\n\n  for (var event in QualityLevelList.prototype.allowedEvents_) {\n    QualityLevelList.prototype['on' + event] = null;\n  }\n  var version = \"4.0.0\";\n\n  /**\n   * Initialization function for the qualityLevels plugin. Sets up the QualityLevelList and\n   * event handlers.\n   *\n   * @param {Player} player Player object.\n   * @param {Object} options Plugin options object.\n   * @return {QualityLevelList} a list of QualityLevels\n   */\n\n  var initPlugin = function initPlugin(player, options) {\n    var originalPluginFn = player.qualityLevels;\n    var qualityLevelList = new QualityLevelList();\n    var disposeHandler = function disposeHandler() {\n      qualityLevelList.dispose();\n      player.qualityLevels = originalPluginFn;\n      player.off('dispose', disposeHandler);\n    };\n    player.on('dispose', disposeHandler);\n    player.qualityLevels = function () {\n      return qualityLevelList;\n    };\n    player.qualityLevels.VERSION = version;\n    return qualityLevelList;\n  };\n  /**\n   * A video.js plugin.\n   *\n   * In the plugin function, the value of `this` is a video.js `Player`\n   * instance. You cannot rely on the player being in a \"ready\" state here,\n   * depending on how the plugin is invoked. This may or may not be important\n   * to you; if not, remove the wait for \"ready\"!\n   *\n   * @param {Object} options Plugin options object\n   * @return {QualityLevelList} a list of QualityLevels\n   */\n\n  var qualityLevels = function qualityLevels(options) {\n    return initPlugin(this, videojs__default['default'].obj.merge({}, options));\n  }; // Register the plugin with video.js.\n\n  videojs__default['default'].registerPlugin('qualityLevels', qualityLevels); // Include the version number.\n\n  qualityLevels.VERSION = version;\n  return qualityLevels;\n});","map":{"version":3,"names":["global","factory","exports","module","require","define","amd","globalThis","self","videojsContribQualityLevels","videojs","_interopDefaultLegacy","e","videojs__default","QualityLevel","_createClass","representation","_classCallCheck","level","id","label","width","height","bitrate","bandwidth","frameRate","enabled_","enabled","Object","defineProperty","get","set","enable","QualityLevelList","_videojs__default$def","_inherits","_super","_createSuper","_this","call","list","_assertThisInitialized","levels_","selectedIndex_","length","Symbol","iterator","values","_possibleConstructorReturn","key","value","addQualityLevel","qualityLevel","getQualityLevelById","index","push","trigger","type","removeQualityLevel","removed","i","l","splice","dispose","EventTarget","prototype","allowedEvents_","change","addqualitylevel","removequalitylevel","event","version","initPlugin","player","options","originalPluginFn","qualityLevels","qualityLevelList","disposeHandler","off","on","VERSION","obj","merge","registerPlugin"],"sources":["C:/Users/hp/Downloads/video_player_uploader-master/backend/frontend-app/node_modules/videojs-contrib-quality-levels/dist/videojs-contrib-quality-levels.js"],"sourcesContent":["/*! @name videojs-contrib-quality-levels @version 4.0.0 @license Apache-2.0 */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('video.js')) :\n  typeof define === 'function' && define.amd ? define(['video.js'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.videojsContribQualityLevels = factory(global.videojs));\n}(this, (function (videojs) { 'use strict';\n\n  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n  var videojs__default = /*#__PURE__*/_interopDefaultLegacy(videojs);\n\n  /**\n   * A single QualityLevel.\n   *\n   * interface QualityLevel {\n   *   readonly attribute DOMString id;\n   *            attribute DOMString label;\n   *   readonly attribute long width;\n   *   readonly attribute long height;\n   *   readonly attribute long bitrate;\n   *            attribute boolean enabled;\n   * };\n   *\n   * @class QualityLevel\n   */\n  class QualityLevel {\n    /**\n     * Creates a QualityLevel\n     *\n     * @param {Representation|Object} representation The representation of the quality level\n     * @param {string}   representation.id        Unique id of the QualityLevel\n     * @param {number=}  representation.width     Resolution width of the QualityLevel\n     * @param {number=}  representation.height    Resolution height of the QualityLevel\n     * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n     * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\n     * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n     */\n    constructor(representation) {\n      let level = this; // eslint-disable-line\n\n      level.id = representation.id;\n      level.label = level.id;\n      level.width = representation.width;\n      level.height = representation.height;\n      level.bitrate = representation.bandwidth;\n      level.frameRate = representation.frameRate;\n      level.enabled_ = representation.enabled;\n      Object.defineProperty(level, 'enabled', {\n        /**\n         * Get whether the QualityLevel is enabled.\n         *\n         * @return {boolean} True if the QualityLevel is enabled.\n         */\n        get() {\n          return level.enabled_();\n        },\n\n        /**\n         * Enable or disable the QualityLevel.\n         *\n         * @param {boolean} enable true to enable QualityLevel, false to disable.\n         */\n        set(enable) {\n          level.enabled_(enable);\n        }\n\n      });\n      return level;\n    }\n\n  }\n\n  /**\n   * A list of QualityLevels.\n   *\n   * interface QualityLevelList : EventTarget {\n   *   getter QualityLevel (unsigned long index);\n   *   readonly attribute unsigned long length;\n   *   readonly attribute long selectedIndex;\n   *\n   *   void addQualityLevel(QualityLevel qualityLevel)\n   *   void removeQualityLevel(QualityLevel remove)\n   *   QualityLevel? getQualityLevelById(DOMString id);\n   *\n   *   attribute EventHandler onchange;\n   *   attribute EventHandler onaddqualitylevel;\n   *   attribute EventHandler onremovequalitylevel;\n   * };\n   *\n   * @extends videojs.EventTarget\n   * @class QualityLevelList\n   */\n\n  class QualityLevelList extends videojs__default['default'].EventTarget {\n    /**\n     * Creates a QualityLevelList.\n     */\n    constructor() {\n      super();\n      let list = this; // eslint-disable-line\n\n      list.levels_ = [];\n      list.selectedIndex_ = -1;\n      /**\n       * Get the index of the currently selected QualityLevel.\n       *\n       * @returns {number} The index of the selected QualityLevel. -1 if none selected.\n       * @readonly\n       */\n\n      Object.defineProperty(list, 'selectedIndex', {\n        get() {\n          return list.selectedIndex_;\n        }\n\n      });\n      /**\n       * Get the length of the list of QualityLevels.\n       *\n       * @returns {number} The length of the list.\n       * @readonly\n       */\n\n      Object.defineProperty(list, 'length', {\n        get() {\n          return list.levels_.length;\n        }\n\n      });\n\n      list[Symbol.iterator] = () => list.levels_.values();\n\n      return list;\n    }\n    /**\n     * Adds a quality level to the list.\n     *\n     * @param {Representation|Object} representation The representation of the quality level\n     * @param {string}   representation.id        Unique id of the QualityLevel\n     * @param {number=}  representation.width     Resolution width of the QualityLevel\n     * @param {number=}  representation.height    Resolution height of the QualityLevel\n     * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n     * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\n     * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n     * @return {QualityLevel} the QualityLevel added to the list\n     * @method addQualityLevel\n     */\n\n\n    addQualityLevel(representation) {\n      let qualityLevel = this.getQualityLevelById(representation.id); // Do not add duplicate quality levels\n\n      if (qualityLevel) {\n        return qualityLevel;\n      }\n\n      const index = this.levels_.length;\n      qualityLevel = new QualityLevel(representation);\n\n      if (!('' + index in this)) {\n        Object.defineProperty(this, index, {\n          get() {\n            return this.levels_[index];\n          }\n\n        });\n      }\n\n      this.levels_.push(qualityLevel);\n      this.trigger({\n        qualityLevel,\n        type: 'addqualitylevel'\n      });\n      return qualityLevel;\n    }\n    /**\n     * Removes a quality level from the list.\n     *\n     * @param {QualityLevel} qualityLevel The QualityLevel to remove from the list.\n     * @return {QualityLevel|null} the QualityLevel removed or null if nothing removed\n     * @method removeQualityLevel\n     */\n\n\n    removeQualityLevel(qualityLevel) {\n      let removed = null;\n\n      for (let i = 0, l = this.length; i < l; i++) {\n        if (this[i] === qualityLevel) {\n          removed = this.levels_.splice(i, 1)[0];\n\n          if (this.selectedIndex_ === i) {\n            this.selectedIndex_ = -1;\n          } else if (this.selectedIndex_ > i) {\n            this.selectedIndex_--;\n          }\n\n          break;\n        }\n      }\n\n      if (removed) {\n        this.trigger({\n          qualityLevel,\n          type: 'removequalitylevel'\n        });\n      }\n\n      return removed;\n    }\n    /**\n     * Searches for a QualityLevel with the given id.\n     *\n     * @param {string} id The id of the QualityLevel to find.\n     * @return {QualityLevel|null} The QualityLevel with id, or null if not found.\n     * @method getQualityLevelById\n     */\n\n\n    getQualityLevelById(id) {\n      for (let i = 0, l = this.length; i < l; i++) {\n        const level = this[i];\n\n        if (level.id === id) {\n          return level;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Resets the list of QualityLevels to empty\n     *\n     * @method dispose\n     */\n\n\n    dispose() {\n      this.selectedIndex_ = -1;\n      this.levels_.length = 0;\n    }\n\n  }\n  /**\n   * change - The selected QualityLevel has changed.\n   * addqualitylevel - A QualityLevel has been added to the QualityLevelList.\n   * removequalitylevel - A QualityLevel has been removed from the QualityLevelList.\n   */\n\n\n  QualityLevelList.prototype.allowedEvents_ = {\n    change: 'change',\n    addqualitylevel: 'addqualitylevel',\n    removequalitylevel: 'removequalitylevel'\n  }; // emulate attribute EventHandler support to allow for feature detection\n\n  for (const event in QualityLevelList.prototype.allowedEvents_) {\n    QualityLevelList.prototype['on' + event] = null;\n  }\n\n  var version = \"4.0.0\";\n\n  /**\n   * Initialization function for the qualityLevels plugin. Sets up the QualityLevelList and\n   * event handlers.\n   *\n   * @param {Player} player Player object.\n   * @param {Object} options Plugin options object.\n   * @return {QualityLevelList} a list of QualityLevels\n   */\n\n  const initPlugin = function (player, options) {\n    const originalPluginFn = player.qualityLevels;\n    const qualityLevelList = new QualityLevelList();\n\n    const disposeHandler = function () {\n      qualityLevelList.dispose();\n      player.qualityLevels = originalPluginFn;\n      player.off('dispose', disposeHandler);\n    };\n\n    player.on('dispose', disposeHandler);\n\n    player.qualityLevels = () => qualityLevelList;\n\n    player.qualityLevels.VERSION = version;\n    return qualityLevelList;\n  };\n  /**\n   * A video.js plugin.\n   *\n   * In the plugin function, the value of `this` is a video.js `Player`\n   * instance. You cannot rely on the player being in a \"ready\" state here,\n   * depending on how the plugin is invoked. This may or may not be important\n   * to you; if not, remove the wait for \"ready\"!\n   *\n   * @param {Object} options Plugin options object\n   * @return {QualityLevelList} a list of QualityLevels\n   */\n\n\n  const qualityLevels = function (options) {\n    return initPlugin(this, videojs__default['default'].obj.merge({}, options));\n  }; // Register the plugin with video.js.\n\n\n  videojs__default['default'].registerPlugin('qualityLevels', qualityLevels); // Include the version number.\n\n  qualityLevels.VERSION = version;\n\n  return qualityLevels;\n\n})));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}