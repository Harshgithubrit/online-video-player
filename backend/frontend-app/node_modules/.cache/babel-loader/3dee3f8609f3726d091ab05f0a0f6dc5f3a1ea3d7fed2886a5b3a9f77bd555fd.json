{"ast":null,"code":"/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\nvar ONE_SECOND_IN_TS = 90000,\n  // 90kHz clock\n  secondsToVideoTs,\n  secondsToAudioTs,\n  videoTsToSeconds,\n  audioTsToSeconds,\n  audioTsToVideoTs,\n  videoTsToAudioTs,\n  metadataTsToSeconds;\nsecondsToVideoTs = function secondsToVideoTs(seconds) {\n  return seconds * ONE_SECOND_IN_TS;\n};\nsecondsToAudioTs = function secondsToAudioTs(seconds, sampleRate) {\n  return seconds * sampleRate;\n};\nvideoTsToSeconds = function videoTsToSeconds(timestamp) {\n  return timestamp / ONE_SECOND_IN_TS;\n};\naudioTsToSeconds = function audioTsToSeconds(timestamp, sampleRate) {\n  return timestamp / sampleRate;\n};\naudioTsToVideoTs = function audioTsToVideoTs(timestamp, sampleRate) {\n  return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n};\nvideoTsToAudioTs = function videoTsToAudioTs(timestamp, sampleRate) {\n  return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n};\n\n/**\n * Adjust ID3 tag or caption timing information by the timeline pts values\n * (if keepOriginalTimestamps is false) and convert to seconds\n */\nmetadataTsToSeconds = function metadataTsToSeconds(timestamp, timelineStartPts, keepOriginalTimestamps) {\n  return videoTsToSeconds(keepOriginalTimestamps ? timestamp : timestamp - timelineStartPts);\n};\nmodule.exports = {\n  ONE_SECOND_IN_TS: ONE_SECOND_IN_TS,\n  secondsToVideoTs: secondsToVideoTs,\n  secondsToAudioTs: secondsToAudioTs,\n  videoTsToSeconds: videoTsToSeconds,\n  audioTsToSeconds: audioTsToSeconds,\n  audioTsToVideoTs: audioTsToVideoTs,\n  videoTsToAudioTs: videoTsToAudioTs,\n  metadataTsToSeconds: metadataTsToSeconds\n};","map":{"version":3,"names":["ONE_SECOND_IN_TS","secondsToVideoTs","secondsToAudioTs","videoTsToSeconds","audioTsToSeconds","audioTsToVideoTs","videoTsToAudioTs","metadataTsToSeconds","seconds","sampleRate","timestamp","timelineStartPts","keepOriginalTimestamps","module","exports"],"sources":["C:/Users/hp/Downloads/video_player_uploader-master/backend/frontend-app/node_modules/mux.js/lib/utils/clock.js"],"sourcesContent":["/**\n * mux.js\n *\n * Copyright (c) Brightcove\n * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n */\nvar\n  ONE_SECOND_IN_TS = 90000, // 90kHz clock\n  secondsToVideoTs,\n  secondsToAudioTs,\n  videoTsToSeconds,\n  audioTsToSeconds,\n  audioTsToVideoTs,\n  videoTsToAudioTs,\n  metadataTsToSeconds;\n\nsecondsToVideoTs = function(seconds) {\n  return seconds * ONE_SECOND_IN_TS;\n};\n\nsecondsToAudioTs = function(seconds, sampleRate) {\n  return seconds * sampleRate;\n};\n\nvideoTsToSeconds = function(timestamp) {\n  return timestamp / ONE_SECOND_IN_TS;\n};\n\naudioTsToSeconds = function(timestamp, sampleRate) {\n  return timestamp / sampleRate;\n};\n\naudioTsToVideoTs = function(timestamp, sampleRate) {\n  return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n};\n\nvideoTsToAudioTs = function(timestamp, sampleRate) {\n  return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n};\n\n/**\n * Adjust ID3 tag or caption timing information by the timeline pts values\n * (if keepOriginalTimestamps is false) and convert to seconds\n */\nmetadataTsToSeconds = function(timestamp, timelineStartPts, keepOriginalTimestamps) {\n  return videoTsToSeconds(keepOriginalTimestamps ? timestamp : timestamp - timelineStartPts);\n};\n\nmodule.exports = {\n  ONE_SECOND_IN_TS: ONE_SECOND_IN_TS,\n  secondsToVideoTs: secondsToVideoTs,\n  secondsToAudioTs: secondsToAudioTs,\n  videoTsToSeconds: videoTsToSeconds,\n  audioTsToSeconds: audioTsToSeconds,\n  audioTsToVideoTs: audioTsToVideoTs,\n  videoTsToAudioTs: videoTsToAudioTs,\n  metadataTsToSeconds: metadataTsToSeconds\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IACEA,gBAAgB,GAAG,KAAK;EAAE;EAC1BC,gBAAgB;EAChBC,gBAAgB;EAChBC,gBAAgB;EAChBC,gBAAgB;EAChBC,gBAAgB;EAChBC,gBAAgB;EAChBC,mBAAmB;AAErBN,gBAAgB,GAAG,SAAAA,iBAASO,OAAO,EAAE;EACnC,OAAOA,OAAO,GAAGR,gBAAgB;AACnC,CAAC;AAEDE,gBAAgB,GAAG,SAAAA,iBAASM,OAAO,EAAEC,UAAU,EAAE;EAC/C,OAAOD,OAAO,GAAGC,UAAU;AAC7B,CAAC;AAEDN,gBAAgB,GAAG,SAAAA,iBAASO,SAAS,EAAE;EACrC,OAAOA,SAAS,GAAGV,gBAAgB;AACrC,CAAC;AAEDI,gBAAgB,GAAG,SAAAA,iBAASM,SAAS,EAAED,UAAU,EAAE;EACjD,OAAOC,SAAS,GAAGD,UAAU;AAC/B,CAAC;AAEDJ,gBAAgB,GAAG,SAAAA,iBAASK,SAAS,EAAED,UAAU,EAAE;EACjD,OAAOR,gBAAgB,CAACG,gBAAgB,CAACM,SAAS,EAAED,UAAU,CAAC,CAAC;AAClE,CAAC;AAEDH,gBAAgB,GAAG,SAAAA,iBAASI,SAAS,EAAED,UAAU,EAAE;EACjD,OAAOP,gBAAgB,CAACC,gBAAgB,CAACO,SAAS,CAAC,EAAED,UAAU,CAAC;AAClE,CAAC;;AAED;AACA;AACA;AACA;AACAF,mBAAmB,GAAG,SAAAA,oBAASG,SAAS,EAAEC,gBAAgB,EAAEC,sBAAsB,EAAE;EAClF,OAAOT,gBAAgB,CAACS,sBAAsB,GAAGF,SAAS,GAAGA,SAAS,GAAGC,gBAAgB,CAAC;AAC5F,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAG;EACfd,gBAAgB,EAAEA,gBAAgB;EAClCC,gBAAgB,EAAEA,gBAAgB;EAClCC,gBAAgB,EAAEA,gBAAgB;EAClCC,gBAAgB,EAAEA,gBAAgB;EAClCC,gBAAgB,EAAEA,gBAAgB;EAClCC,gBAAgB,EAAEA,gBAAgB;EAClCC,gBAAgB,EAAEA,gBAAgB;EAClCC,mBAAmB,EAAEA;AACvB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}