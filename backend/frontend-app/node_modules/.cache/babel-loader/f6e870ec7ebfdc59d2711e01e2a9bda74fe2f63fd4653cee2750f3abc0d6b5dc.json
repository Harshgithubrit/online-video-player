{"ast":null,"code":"import _slicedToArray from \"C:/Users/hp/Downloads/video_player_uploader-master/backend/frontend-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"C:/Users/hp/Downloads/video_player_uploader-master/backend/frontend-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"C:/Users/hp/Downloads/video_player_uploader-master/backend/frontend-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/*! @name mpd-parser @version 1.3.0 @license Apache-2.0 */\nimport resolveUrl from '@videojs/vhs-utils/es/resolve-url';\nimport window from 'global/window';\nimport { forEachMediaGroup } from '@videojs/vhs-utils/es/media-groups';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/es/decode-b64-to-uint8-array';\nimport { DOMParser } from '@xmldom/xmldom';\nvar version = \"1.3.0\";\nvar isObject = function isObject(obj) {\n  return !!obj && typeof obj === 'object';\n};\nvar merge = function merge() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n  return objects.reduce(function (result, source) {\n    if (typeof source !== 'object') {\n      return result;\n    }\n    Object.keys(source).forEach(function (key) {\n      if (Array.isArray(result[key]) && Array.isArray(source[key])) {\n        result[key] = result[key].concat(source[key]);\n      } else if (isObject(result[key]) && isObject(source[key])) {\n        result[key] = merge(result[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n    return result;\n  }, {});\n};\nvar values = function values(o) {\n  return Object.keys(o).map(function (k) {\n    return o[k];\n  });\n};\nvar range = function range(start, end) {\n  var result = [];\n  for (var i = start; i < end; i++) {\n    result.push(i);\n  }\n  return result;\n};\nvar flatten = function flatten(lists) {\n  return lists.reduce(function (x, y) {\n    return x.concat(y);\n  }, []);\n};\nvar from = function from(list) {\n  if (!list.length) {\n    return [];\n  }\n  var result = [];\n  for (var i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n  return result;\n};\nvar findIndexes = function findIndexes(l, key) {\n  return l.reduce(function (a, e, i) {\n    if (e[key]) {\n      a.push(i);\n    }\n    return a;\n  }, []);\n};\n/**\n * Returns a union of the included lists provided each element can be identified by a key.\n *\n * @param {Array} list - list of lists to get the union of\n * @param {Function} keyFunction - the function to use as a key for each element\n *\n * @return {Array} the union of the arrays\n */\n\nvar union = function union(lists, keyFunction) {\n  return values(lists.reduce(function (acc, list) {\n    list.forEach(function (el) {\n      acc[keyFunction(el)] = el;\n    });\n    return acc;\n  }, {}));\n};\nvar errors = {\n  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\n  INVALID_NUMBER_OF_CONTENT_STEERING: 'INVALID_NUMBER_OF_CONTENT_STEERING',\n  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\n  DASH_INVALID_XML: 'DASH_INVALID_XML',\n  NO_BASE_URL: 'NO_BASE_URL',\n  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\n  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\n  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\n};\n\n/**\n * @typedef {Object} SingleUri\n * @property {string} uri - relative location of segment\n * @property {string} resolvedUri - resolved location of segment\n * @property {Object} byterange - Object containing information on how to make byte range\n *   requests following byte-range-spec per RFC2616.\n * @property {String} byterange.length - length of range request\n * @property {String} byterange.offset - byte offset of range request\n *\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\n */\n\n/**\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\n * that conforms to how m3u8-parser is structured\n *\n * @see https://github.com/videojs/m3u8-parser\n *\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\n * @param {string} source - source url for segment\n * @param {string} range - optional range used for range calls,\n *   follows  RFC 2616, Clause 14.35.1\n * @return {SingleUri} full segment information transformed into a format similar\n *   to m3u8-parser\n */\n\nvar urlTypeToSegment = function urlTypeToSegment(_ref) {\n  var _ref$baseUrl = _ref.baseUrl,\n    baseUrl = _ref$baseUrl === void 0 ? '' : _ref$baseUrl,\n    _ref$source = _ref.source,\n    source = _ref$source === void 0 ? '' : _ref$source,\n    _ref$range = _ref.range,\n    range = _ref$range === void 0 ? '' : _ref$range,\n    _ref$indexRange = _ref.indexRange,\n    indexRange = _ref$indexRange === void 0 ? '' : _ref$indexRange;\n  var segment = {\n    uri: source,\n    resolvedUri: resolveUrl(baseUrl || '', source)\n  };\n  if (range || indexRange) {\n    var rangeStr = range ? range : indexRange;\n    var ranges = rangeStr.split('-'); // default to parsing this as a BigInt if possible\n\n    var startRange = window.BigInt ? window.BigInt(ranges[0]) : parseInt(ranges[0], 10);\n    var endRange = window.BigInt ? window.BigInt(ranges[1]) : parseInt(ranges[1], 10); // convert back to a number if less than MAX_SAFE_INTEGER\n\n    if (startRange < Number.MAX_SAFE_INTEGER && typeof startRange === 'bigint') {\n      startRange = Number(startRange);\n    }\n    if (endRange < Number.MAX_SAFE_INTEGER && typeof endRange === 'bigint') {\n      endRange = Number(endRange);\n    }\n    var length;\n    if (typeof endRange === 'bigint' || typeof startRange === 'bigint') {\n      length = window.BigInt(endRange) - window.BigInt(startRange) + window.BigInt(1);\n    } else {\n      length = endRange - startRange + 1;\n    }\n    if (typeof length === 'bigint' && length < Number.MAX_SAFE_INTEGER) {\n      length = Number(length);\n    } // byterange should be inclusive according to\n    // RFC 2616, Clause 14.35.1\n\n    segment.byterange = {\n      length: length,\n      offset: startRange\n    };\n  }\n  return segment;\n};\nvar byteRangeToString = function byteRangeToString(byterange) {\n  // `endRange` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  var endRange;\n  if (typeof byterange.offset === 'bigint' || typeof byterange.length === 'bigint') {\n    endRange = window.BigInt(byterange.offset) + window.BigInt(byterange.length) - window.BigInt(1);\n  } else {\n    endRange = byterange.offset + byterange.length - 1;\n  }\n  return \"\".concat(byterange.offset, \"-\").concat(endRange);\n};\n\n/**\n * parse the end number attribue that can be a string\n * number, or undefined.\n *\n * @param {string|number|undefined} endNumber\n *        The end number attribute.\n *\n * @return {number|null}\n *          The result of parsing the end number.\n */\n\nvar parseEndNumber = function parseEndNumber(endNumber) {\n  if (endNumber && typeof endNumber !== 'number') {\n    endNumber = parseInt(endNumber, 10);\n  }\n  if (isNaN(endNumber)) {\n    return null;\n  }\n  return endNumber;\n};\n/**\n * Functions for calculating the range of available segments in static and dynamic\n * manifests.\n */\n\nvar segmentRange = {\n  /**\n   * Returns the entire range of available segments for a static MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  static: function _static(attributes) {\n    var duration = attributes.duration,\n      _attributes$timescale = attributes.timescale,\n      timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n      sourceDuration = attributes.sourceDuration,\n      periodDuration = attributes.periodDuration;\n    var endNumber = parseEndNumber(attributes.endNumber);\n    var segmentDuration = duration / timescale;\n    if (typeof endNumber === 'number') {\n      return {\n        start: 0,\n        end: endNumber\n      };\n    }\n    if (typeof periodDuration === 'number') {\n      return {\n        start: 0,\n        end: periodDuration / segmentDuration\n      };\n    }\n    return {\n      start: 0,\n      end: sourceDuration / segmentDuration\n    };\n  },\n  /**\n   * Returns the current live window range of available segments for a dynamic MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  dynamic: function dynamic(attributes) {\n    var NOW = attributes.NOW,\n      clientOffset = attributes.clientOffset,\n      availabilityStartTime = attributes.availabilityStartTime,\n      _attributes$timescale2 = attributes.timescale,\n      timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n      duration = attributes.duration,\n      _attributes$periodSta = attributes.periodStart,\n      periodStart = _attributes$periodSta === void 0 ? 0 : _attributes$periodSta,\n      _attributes$minimumUp = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp,\n      _attributes$timeShift = attributes.timeShiftBufferDepth,\n      timeShiftBufferDepth = _attributes$timeShift === void 0 ? Infinity : _attributes$timeShift;\n    var endNumber = parseEndNumber(attributes.endNumber); // clientOffset is passed in at the top level of mpd-parser and is an offset calculated\n    // after retrieving UTC server time.\n\n    var now = (NOW + clientOffset) / 1000; // WC stands for Wall Clock.\n    // Convert the period start time to EPOCH.\n\n    var periodStartWC = availabilityStartTime + periodStart; // Period end in EPOCH is manifest's retrieval time + time until next update.\n\n    var periodEndWC = now + minimumUpdatePeriod;\n    var periodDuration = periodEndWC - periodStartWC;\n    var segmentCount = Math.ceil(periodDuration * timescale / duration);\n    var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\n    var availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\n    return {\n      start: Math.max(0, availableStart),\n      end: typeof endNumber === 'number' ? endNumber : Math.min(segmentCount, availableEnd)\n    };\n  }\n};\n/**\n * Maps a range of numbers to objects with information needed to build the corresponding\n * segment list\n *\n * @name toSegmentsCallback\n * @function\n * @param {number} number\n *        Number of the segment\n * @param {number} index\n *        Index of the number in the range list\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\n *         Object with segment timing and duration info\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\n * information needed to build the segment list.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {toSegmentsCallback}\n *         Callback map function\n */\n\nvar toSegments = function toSegments(attributes) {\n  return function (number) {\n    var duration = attributes.duration,\n      _attributes$timescale3 = attributes.timescale,\n      timescale = _attributes$timescale3 === void 0 ? 1 : _attributes$timescale3,\n      periodStart = attributes.periodStart,\n      _attributes$startNumb = attributes.startNumber,\n      startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb;\n    return {\n      number: startNumber + number,\n      duration: duration / timescale,\n      timeline: periodStart,\n      time: number * duration\n    };\n  };\n};\n/**\n * Returns a list of objects containing segment timing and duration info used for\n * building the list of segments. This uses the @duration attribute specified\n * in the MPD manifest to derive the range of segments.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nvar parseByDuration = function parseByDuration(attributes) {\n  var type = attributes.type,\n    duration = attributes.duration,\n    _attributes$timescale4 = attributes.timescale,\n    timescale = _attributes$timescale4 === void 0 ? 1 : _attributes$timescale4,\n    periodDuration = attributes.periodDuration,\n    sourceDuration = attributes.sourceDuration;\n  var _segmentRange$type = segmentRange[type](attributes),\n    start = _segmentRange$type.start,\n    end = _segmentRange$type.end;\n  var segments = range(start, end).map(toSegments(attributes));\n  if (type === 'static') {\n    var index = segments.length - 1; // section is either a period or the full source\n\n    var sectionDuration = typeof periodDuration === 'number' ? periodDuration : sourceDuration; // final segment may be less than full segment duration\n\n    segments[index].duration = sectionDuration - duration / timescale * index;\n  }\n  return segments;\n};\n\n/**\n * Translates SegmentBase into a set of segments.\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @return {Object.<Array>} list of segments\n */\n\nvar segmentsFromBase = function segmentsFromBase(attributes) {\n  var baseUrl = attributes.baseUrl,\n    _attributes$initializ = attributes.initialization,\n    initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ,\n    sourceDuration = attributes.sourceDuration,\n    _attributes$indexRang = attributes.indexRange,\n    indexRange = _attributes$indexRang === void 0 ? '' : _attributes$indexRang,\n    periodStart = attributes.periodStart,\n    presentationTime = attributes.presentationTime,\n    _attributes$number = attributes.number,\n    number = _attributes$number === void 0 ? 0 : _attributes$number,\n    duration = attributes.duration; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\n\n  if (!baseUrl) {\n    throw new Error(errors.NO_BASE_URL);\n  }\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: baseUrl,\n    indexRange: indexRange\n  });\n  segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source\n  // (since SegmentBase is only for one total segment)\n\n  if (duration) {\n    var segmentTimeInfo = parseByDuration(attributes);\n    if (segmentTimeInfo.length) {\n      segment.duration = segmentTimeInfo[0].duration;\n      segment.timeline = segmentTimeInfo[0].timeline;\n    }\n  } else if (sourceDuration) {\n    segment.duration = sourceDuration;\n    segment.timeline = periodStart;\n  } // If presentation time is provided, these segments are being generated by SIDX\n  // references, and should use the time provided. For the general case of SegmentBase,\n  // there should only be one segment in the period, so its presentation time is the same\n  // as its period start.\n\n  segment.presentationTime = presentationTime || periodStart;\n  segment.number = number;\n  return [segment];\n};\n/**\n * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist\n * according to the sidx information given.\n *\n * playlist.sidx has metadadata about the sidx where-as the sidx param\n * is the parsed sidx box itself.\n *\n * @param {Object} playlist the playlist to update the sidx information for\n * @param {Object} sidx the parsed sidx box\n * @return {Object} the playlist object with the updated sidx information\n */\n\nvar addSidxSegmentsToPlaylist$1 = function addSidxSegmentsToPlaylist$1(playlist, sidx, baseUrl) {\n  // Retain init segment information\n  var initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial main manifest parsing\n\n  var sourceDuration = playlist.sidx.duration; // Retain source timeline\n\n  var timeline = playlist.timeline || 0;\n  var sidxByteRange = playlist.sidx.byterange;\n  var sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx\n\n  var timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes\n\n  var mediaReferences = sidx.references.filter(function (r) {\n    return r.referenceType !== 1;\n  });\n  var segments = [];\n  var type = playlist.endList ? 'static' : 'dynamic';\n  var periodStart = playlist.sidx.timeline;\n  var presentationTime = periodStart;\n  var number = playlist.mediaSequence || 0; // firstOffset is the offset from the end of the sidx box\n\n  var startIndex; // eslint-disable-next-line\n\n  if (typeof sidx.firstOffset === 'bigint') {\n    startIndex = window.BigInt(sidxEnd) + sidx.firstOffset;\n  } else {\n    startIndex = sidxEnd + sidx.firstOffset;\n  }\n  for (var i = 0; i < mediaReferences.length; i++) {\n    var reference = sidx.references[i]; // size of the referenced (sub)segment\n\n    var size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale\n    // this will be converted to seconds when generating segments\n\n    var duration = reference.subsegmentDuration; // should be an inclusive range\n\n    var endIndex = void 0; // eslint-disable-next-line\n\n    if (typeof startIndex === 'bigint') {\n      endIndex = startIndex + window.BigInt(size) - window.BigInt(1);\n    } else {\n      endIndex = startIndex + size - 1;\n    }\n    var indexRange = \"\".concat(startIndex, \"-\").concat(endIndex);\n    var attributes = {\n      baseUrl: baseUrl,\n      timescale: timescale,\n      timeline: timeline,\n      periodStart: periodStart,\n      presentationTime: presentationTime,\n      number: number,\n      duration: duration,\n      sourceDuration: sourceDuration,\n      indexRange: indexRange,\n      type: type\n    };\n    var segment = segmentsFromBase(attributes)[0];\n    if (initSegment) {\n      segment.map = initSegment;\n    }\n    segments.push(segment);\n    if (typeof startIndex === 'bigint') {\n      startIndex += window.BigInt(size);\n    } else {\n      startIndex += size;\n    }\n    presentationTime += duration / timescale;\n    number++;\n  }\n  playlist.segments = segments;\n  return playlist;\n};\nvar SUPPORTED_MEDIA_TYPES = ['AUDIO', 'SUBTITLES']; // allow one 60fps frame as leniency (arbitrarily chosen)\n\nvar TIME_FUDGE = 1 / 60;\n/**\n * Given a list of timelineStarts, combines, dedupes, and sorts them.\n *\n * @param {TimelineStart[]} timelineStarts - list of timeline starts\n *\n * @return {TimelineStart[]} the combined and deduped timeline starts\n */\n\nvar getUniqueTimelineStarts = function getUniqueTimelineStarts(timelineStarts) {\n  return union(timelineStarts, function (_ref2) {\n    var timeline = _ref2.timeline;\n    return timeline;\n  }).sort(function (a, b) {\n    return a.timeline > b.timeline ? 1 : -1;\n  });\n};\n/**\n * Finds the playlist with the matching NAME attribute.\n *\n * @param {Array} playlists - playlists to search through\n * @param {string} name - the NAME attribute to search for\n *\n * @return {Object|null} the matching playlist object, or null\n */\n\nvar findPlaylistWithName = function findPlaylistWithName(playlists, name) {\n  for (var i = 0; i < playlists.length; i++) {\n    if (playlists[i].attributes.NAME === name) {\n      return playlists[i];\n    }\n  }\n  return null;\n};\n/**\n * Gets a flattened array of media group playlists.\n *\n * @param {Object} manifest - the main manifest object\n *\n * @return {Array} the media group playlists\n */\n\nvar getMediaGroupPlaylists = function getMediaGroupPlaylists(manifest) {\n  var mediaGroupPlaylists = [];\n  forEachMediaGroup(manifest, SUPPORTED_MEDIA_TYPES, function (properties, type, group, label) {\n    mediaGroupPlaylists = mediaGroupPlaylists.concat(properties.playlists || []);\n  });\n  return mediaGroupPlaylists;\n};\n/**\n * Updates the playlist's media sequence numbers.\n *\n * @param {Object} config - options object\n * @param {Object} config.playlist - the playlist to update\n * @param {number} config.mediaSequence - the mediaSequence number to start with\n */\n\nvar updateMediaSequenceForPlaylist = function updateMediaSequenceForPlaylist(_ref3) {\n  var playlist = _ref3.playlist,\n    mediaSequence = _ref3.mediaSequence;\n  playlist.mediaSequence = mediaSequence;\n  playlist.segments.forEach(function (segment, index) {\n    segment.number = playlist.mediaSequence + index;\n  });\n};\n/**\n * Updates the media and discontinuity sequence numbers of newPlaylists given oldPlaylists\n * and a complete list of timeline starts.\n *\n * If no matching playlist is found, only the discontinuity sequence number of the playlist\n * will be updated.\n *\n * Since early available timelines are not supported, at least one segment must be present.\n *\n * @param {Object} config - options object\n * @param {Object[]} oldPlaylists - the old playlists to use as a reference\n * @param {Object[]} newPlaylists - the new playlists to update\n * @param {Object} timelineStarts - all timelineStarts seen in the stream to this point\n */\n\nvar updateSequenceNumbers = function updateSequenceNumbers(_ref4) {\n  var oldPlaylists = _ref4.oldPlaylists,\n    newPlaylists = _ref4.newPlaylists,\n    timelineStarts = _ref4.timelineStarts;\n  newPlaylists.forEach(function (playlist) {\n    playlist.discontinuitySequence = timelineStarts.findIndex(function (_ref5) {\n      var timeline = _ref5.timeline;\n      return timeline === playlist.timeline;\n    }); // Playlists NAMEs come from DASH Representation IDs, which are mandatory\n    // (see ISO_23009-1-2012 5.3.5.2).\n    //\n    // If the same Representation existed in a prior Period, it will retain the same NAME.\n\n    var oldPlaylist = findPlaylistWithName(oldPlaylists, playlist.attributes.NAME);\n    if (!oldPlaylist) {\n      // Since this is a new playlist, the media sequence values can start from 0 without\n      // consequence.\n      return;\n    } // TODO better support for live SIDX\n    //\n    // As of this writing, mpd-parser does not support multiperiod SIDX (in live or VOD).\n    // This is evident by a playlist only having a single SIDX reference. In a multiperiod\n    // playlist there would need to be multiple SIDX references. In addition, live SIDX is\n    // not supported when the SIDX properties change on refreshes.\n    //\n    // In the future, if support needs to be added, the merging logic here can be called\n    // after SIDX references are resolved. For now, exit early to prevent exceptions being\n    // thrown due to undefined references.\n\n    if (playlist.sidx) {\n      return;\n    } // Since we don't yet support early available timelines, we don't need to support\n    // playlists with no segments.\n\n    var firstNewSegment = playlist.segments[0];\n    var oldMatchingSegmentIndex = oldPlaylist.segments.findIndex(function (oldSegment) {\n      return Math.abs(oldSegment.presentationTime - firstNewSegment.presentationTime) < TIME_FUDGE;\n    }); // No matching segment from the old playlist means the entire playlist was refreshed.\n    // In this case the media sequence should account for this update, and the new segments\n    // should be marked as discontinuous from the prior content, since the last prior\n    // timeline was removed.\n\n    if (oldMatchingSegmentIndex === -1) {\n      updateMediaSequenceForPlaylist({\n        playlist: playlist,\n        mediaSequence: oldPlaylist.mediaSequence + oldPlaylist.segments.length\n      });\n      playlist.segments[0].discontinuity = true;\n      playlist.discontinuityStarts.unshift(0); // No matching segment does not necessarily mean there's missing content.\n      //\n      // If the new playlist's timeline is the same as the last seen segment's timeline,\n      // then a discontinuity can be added to identify that there's potentially missing\n      // content. If there's no missing content, the discontinuity should still be rather\n      // harmless. It's possible that if segment durations are accurate enough, that the\n      // existence of a gap can be determined using the presentation times and durations,\n      // but if the segment timing info is off, it may introduce more problems than simply\n      // adding the discontinuity.\n      //\n      // If the new playlist's timeline is different from the last seen segment's timeline,\n      // then a discontinuity can be added to identify that this is the first seen segment\n      // of a new timeline. However, the logic at the start of this function that\n      // determined the disconinuity sequence by timeline index is now off by one (the\n      // discontinuity of the newest timeline hasn't yet fallen off the manifest...since\n      // we added it), so the disconinuity sequence must be decremented.\n      //\n      // A period may also have a duration of zero, so the case of no segments is handled\n      // here even though we don't yet support early available periods.\n\n      if (!oldPlaylist.segments.length && playlist.timeline > oldPlaylist.timeline || oldPlaylist.segments.length && playlist.timeline > oldPlaylist.segments[oldPlaylist.segments.length - 1].timeline) {\n        playlist.discontinuitySequence--;\n      }\n      return;\n    } // If the first segment matched with a prior segment on a discontinuity (it's matching\n    // on the first segment of a period), then the discontinuitySequence shouldn't be the\n    // timeline's matching one, but instead should be the one prior, and the first segment\n    // of the new manifest should be marked with a discontinuity.\n    //\n    // The reason for this special case is that discontinuity sequence shows how many\n    // discontinuities have fallen off of the playlist, and discontinuities are marked on\n    // the first segment of a new \"timeline.\" Because of this, while DASH will retain that\n    // Period while the \"timeline\" exists, HLS keeps track of it via the discontinuity\n    // sequence, and that first segment is an indicator, but can be removed before that\n    // timeline is gone.\n\n    var oldMatchingSegment = oldPlaylist.segments[oldMatchingSegmentIndex];\n    if (oldMatchingSegment.discontinuity && !firstNewSegment.discontinuity) {\n      firstNewSegment.discontinuity = true;\n      playlist.discontinuityStarts.unshift(0);\n      playlist.discontinuitySequence--;\n    }\n    updateMediaSequenceForPlaylist({\n      playlist: playlist,\n      mediaSequence: oldPlaylist.segments[oldMatchingSegmentIndex].number\n    });\n  });\n};\n/**\n * Given an old parsed manifest object and a new parsed manifest object, updates the\n * sequence and timing values within the new manifest to ensure that it lines up with the\n * old.\n *\n * @param {Array} oldManifest - the old main manifest object\n * @param {Array} newManifest - the new main manifest object\n *\n * @return {Object} the updated new manifest object\n */\n\nvar positionManifestOnTimeline = function positionManifestOnTimeline(_ref6) {\n  var oldManifest = _ref6.oldManifest,\n    newManifest = _ref6.newManifest;\n  // Starting from v4.1.2 of the IOP, section 4.4.3.3 states:\n  //\n  // \"MPD@availabilityStartTime and Period@start shall not be changed over MPD updates.\"\n  //\n  // This was added from https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/160\n  //\n  // Because of this change, and the difficulty of supporting periods with changing start\n  // times, periods with changing start times are not supported. This makes the logic much\n  // simpler, since periods with the same start time can be considerred the same period\n  // across refreshes.\n  //\n  // To give an example as to the difficulty of handling periods where the start time may\n  // change, if a single period manifest is refreshed with another manifest with a single\n  // period, and both the start and end times are increased, then the only way to determine\n  // if it's a new period or an old one that has changed is to look through the segments of\n  // each playlist and determine the presentation time bounds to find a match. In addition,\n  // if the period start changed to exceed the old period end, then there would be no\n  // match, and it would not be possible to determine whether the refreshed period is a new\n  // one or the old one.\n  var oldPlaylists = oldManifest.playlists.concat(getMediaGroupPlaylists(oldManifest));\n  var newPlaylists = newManifest.playlists.concat(getMediaGroupPlaylists(newManifest)); // Save all seen timelineStarts to the new manifest. Although this potentially means that\n  // there's a \"memory leak\" in that it will never stop growing, in reality, only a couple\n  // of properties are saved for each seen Period. Even long running live streams won't\n  // generate too many Periods, unless the stream is watched for decades. In the future,\n  // this can be optimized by mapping to discontinuity sequence numbers for each timeline,\n  // but it may not become an issue, and the additional info can be useful for debugging.\n\n  newManifest.timelineStarts = getUniqueTimelineStarts([oldManifest.timelineStarts, newManifest.timelineStarts]);\n  updateSequenceNumbers({\n    oldPlaylists: oldPlaylists,\n    newPlaylists: newPlaylists,\n    timelineStarts: newManifest.timelineStarts\n  });\n  return newManifest;\n};\nvar generateSidxKey = function generateSidxKey(sidx) {\n  return sidx && sidx.uri + '-' + byteRangeToString(sidx.byterange);\n};\nvar mergeDiscontiguousPlaylists = function mergeDiscontiguousPlaylists(playlists) {\n  // Break out playlists into groups based on their baseUrl\n  var playlistsByBaseUrl = playlists.reduce(function (acc, cur) {\n    if (!acc[cur.attributes.baseUrl]) {\n      acc[cur.attributes.baseUrl] = [];\n    }\n    acc[cur.attributes.baseUrl].push(cur);\n    return acc;\n  }, {});\n  var allPlaylists = [];\n  Object.values(playlistsByBaseUrl).forEach(function (playlistGroup) {\n    var mergedPlaylists = values(playlistGroup.reduce(function (acc, playlist) {\n      // assuming playlist IDs are the same across periods\n      // TODO: handle multiperiod where representation sets are not the same\n      // across periods\n      var name = playlist.attributes.id + (playlist.attributes.lang || '');\n      if (!acc[name]) {\n        // First Period\n        acc[name] = playlist;\n        acc[name].attributes.timelineStarts = [];\n      } else {\n        // Subsequent Periods\n        if (playlist.segments) {\n          var _acc$name$segments;\n          // first segment of subsequent periods signal a discontinuity\n          if (playlist.segments[0]) {\n            playlist.segments[0].discontinuity = true;\n          }\n          (_acc$name$segments = acc[name].segments).push.apply(_acc$name$segments, _toConsumableArray(playlist.segments));\n        } // bubble up contentProtection, this assumes all DRM content\n        // has the same contentProtection\n\n        if (playlist.attributes.contentProtection) {\n          acc[name].attributes.contentProtection = playlist.attributes.contentProtection;\n        }\n      }\n      acc[name].attributes.timelineStarts.push({\n        // Although they represent the same number, it's important to have both to make it\n        // compatible with HLS potentially having a similar attribute.\n        start: playlist.attributes.periodStart,\n        timeline: playlist.attributes.periodStart\n      });\n      return acc;\n    }, {}));\n    allPlaylists = allPlaylists.concat(mergedPlaylists);\n  });\n  return allPlaylists.map(function (playlist) {\n    playlist.discontinuityStarts = findIndexes(playlist.segments || [], 'discontinuity');\n    return playlist;\n  });\n};\nvar addSidxSegmentsToPlaylist = function addSidxSegmentsToPlaylist(playlist, sidxMapping) {\n  var sidxKey = generateSidxKey(playlist.sidx);\n  var sidxMatch = sidxKey && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;\n  if (sidxMatch) {\n    addSidxSegmentsToPlaylist$1(playlist, sidxMatch, playlist.sidx.resolvedUri);\n  }\n  return playlist;\n};\nvar addSidxSegmentsToPlaylists = function addSidxSegmentsToPlaylists(playlists) {\n  var sidxMapping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!Object.keys(sidxMapping).length) {\n    return playlists;\n  }\n  for (var i in playlists) {\n    playlists[i] = addSidxSegmentsToPlaylist(playlists[i], sidxMapping);\n  }\n  return playlists;\n};\nvar formatAudioPlaylist = function formatAudioPlaylist(_ref7, isAudioOnly) {\n  var attributes = _ref7.attributes,\n    segments = _ref7.segments,\n    sidx = _ref7.sidx,\n    mediaSequence = _ref7.mediaSequence,\n    discontinuitySequence = _ref7.discontinuitySequence,\n    discontinuityStarts = _ref7.discontinuityStarts;\n  var playlist = {\n    attributes: _defineProperty({\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth,\n      CODECS: attributes.codecs\n    }, 'PROGRAM-ID', 1),\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    discontinuitySequence: discontinuitySequence,\n    discontinuityStarts: discontinuityStarts,\n    timelineStarts: attributes.timelineStarts,\n    mediaSequence: mediaSequence,\n    segments: segments\n  };\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n  if (attributes.serviceLocation) {\n    playlist.attributes.serviceLocation = attributes.serviceLocation;\n  }\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n  if (isAudioOnly) {\n    playlist.attributes.AUDIO = 'audio';\n    playlist.attributes.SUBTITLES = 'subs';\n  }\n  return playlist;\n};\nvar formatVttPlaylist = function formatVttPlaylist(_ref8) {\n  var attributes = _ref8.attributes,\n    segments = _ref8.segments,\n    mediaSequence = _ref8.mediaSequence,\n    discontinuityStarts = _ref8.discontinuityStarts,\n    discontinuitySequence = _ref8.discontinuitySequence;\n  if (typeof segments === 'undefined') {\n    // vtt tracks may use single file in BaseURL\n    segments = [{\n      uri: attributes.baseUrl,\n      timeline: attributes.periodStart,\n      resolvedUri: attributes.baseUrl || '',\n      duration: attributes.sourceDuration,\n      number: 0\n    }]; // targetDuration should be the same duration as the only segment\n\n    attributes.duration = attributes.sourceDuration;\n  }\n  var m3u8Attributes = _defineProperty({\n    NAME: attributes.id,\n    BANDWIDTH: attributes.bandwidth\n  }, 'PROGRAM-ID', 1);\n  if (attributes.codecs) {\n    m3u8Attributes.CODECS = attributes.codecs;\n  }\n  var vttPlaylist = {\n    attributes: m3u8Attributes,\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    timelineStarts: attributes.timelineStarts,\n    discontinuityStarts: discontinuityStarts,\n    discontinuitySequence: discontinuitySequence,\n    mediaSequence: mediaSequence,\n    segments: segments\n  };\n  if (attributes.serviceLocation) {\n    vttPlaylist.attributes.serviceLocation = attributes.serviceLocation;\n  }\n  return vttPlaylist;\n};\nvar organizeAudioPlaylists = function organizeAudioPlaylists(playlists) {\n  var sidxMapping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var isAudioOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var mainPlaylist;\n  var formattedPlaylists = playlists.reduce(function (a, playlist) {\n    var role = playlist.attributes.role && playlist.attributes.role.value || '';\n    var language = playlist.attributes.lang || '';\n    var label = playlist.attributes.label || 'main';\n    if (language && !playlist.attributes.label) {\n      var roleLabel = role ? \" (\".concat(role, \")\") : '';\n      label = \"\".concat(playlist.attributes.lang).concat(roleLabel);\n    }\n    if (!a[label]) {\n      a[label] = {\n        language: language,\n        autoselect: true,\n        default: role === 'main',\n        playlists: [],\n        uri: ''\n      };\n    }\n    var formatted = addSidxSegmentsToPlaylist(formatAudioPlaylist(playlist, isAudioOnly), sidxMapping);\n    a[label].playlists.push(formatted);\n    if (typeof mainPlaylist === 'undefined' && role === 'main') {\n      mainPlaylist = playlist;\n      mainPlaylist.default = true;\n    }\n    return a;\n  }, {}); // if no playlists have role \"main\", mark the first as main\n\n  if (!mainPlaylist) {\n    var firstLabel = Object.keys(formattedPlaylists)[0];\n    formattedPlaylists[firstLabel].default = true;\n  }\n  return formattedPlaylists;\n};\nvar organizeVttPlaylists = function organizeVttPlaylists(playlists) {\n  var sidxMapping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return playlists.reduce(function (a, playlist) {\n    var label = playlist.attributes.label || playlist.attributes.lang || 'text';\n    if (!a[label]) {\n      a[label] = {\n        language: label,\n        default: false,\n        autoselect: false,\n        playlists: [],\n        uri: ''\n      };\n    }\n    a[label].playlists.push(addSidxSegmentsToPlaylist(formatVttPlaylist(playlist), sidxMapping));\n    return a;\n  }, {});\n};\nvar organizeCaptionServices = function organizeCaptionServices(captionServices) {\n  return captionServices.reduce(function (svcObj, svc) {\n    if (!svc) {\n      return svcObj;\n    }\n    svc.forEach(function (service) {\n      var channel = service.channel,\n        language = service.language;\n      svcObj[language] = {\n        autoselect: false,\n        default: false,\n        instreamId: channel,\n        language: language\n      };\n      if (service.hasOwnProperty('aspectRatio')) {\n        svcObj[language].aspectRatio = service.aspectRatio;\n      }\n      if (service.hasOwnProperty('easyReader')) {\n        svcObj[language].easyReader = service.easyReader;\n      }\n      if (service.hasOwnProperty('3D')) {\n        svcObj[language]['3D'] = service['3D'];\n      }\n    });\n    return svcObj;\n  }, {});\n};\nvar formatVideoPlaylist = function formatVideoPlaylist(_ref9) {\n  var attributes = _ref9.attributes,\n    segments = _ref9.segments,\n    sidx = _ref9.sidx,\n    discontinuityStarts = _ref9.discontinuityStarts;\n  var playlist = {\n    attributes: _defineProperty({\n      NAME: attributes.id,\n      AUDIO: 'audio',\n      SUBTITLES: 'subs',\n      RESOLUTION: {\n        width: attributes.width,\n        height: attributes.height\n      },\n      CODECS: attributes.codecs,\n      BANDWIDTH: attributes.bandwidth\n    }, 'PROGRAM-ID', 1),\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    discontinuityStarts: discontinuityStarts,\n    timelineStarts: attributes.timelineStarts,\n    segments: segments\n  };\n  if (attributes.frameRate) {\n    playlist.attributes['FRAME-RATE'] = attributes.frameRate;\n  }\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n  if (attributes.serviceLocation) {\n    playlist.attributes.serviceLocation = attributes.serviceLocation;\n  }\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n  return playlist;\n};\nvar videoOnly = function videoOnly(_ref10) {\n  var attributes = _ref10.attributes;\n  return attributes.mimeType === 'video/mp4' || attributes.mimeType === 'video/webm' || attributes.contentType === 'video';\n};\nvar audioOnly = function audioOnly(_ref11) {\n  var attributes = _ref11.attributes;\n  return attributes.mimeType === 'audio/mp4' || attributes.mimeType === 'audio/webm' || attributes.contentType === 'audio';\n};\nvar vttOnly = function vttOnly(_ref12) {\n  var attributes = _ref12.attributes;\n  return attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\n};\n/**\n * Contains start and timeline properties denoting a timeline start. For DASH, these will\n * be the same number.\n *\n * @typedef {Object} TimelineStart\n * @property {number} start - the start time of the timeline\n * @property {number} timeline - the timeline number\n */\n\n/**\n * Adds appropriate media and discontinuity sequence values to the segments and playlists.\n *\n * Throughout mpd-parser, the `number` attribute is used in relation to `startNumber`, a\n * DASH specific attribute used in constructing segment URI's from templates. However, from\n * an HLS perspective, the `number` attribute on a segment would be its `mediaSequence`\n * value, which should start at the original media sequence value (or 0) and increment by 1\n * for each segment thereafter. Since DASH's `startNumber` values are independent per\n * period, it doesn't make sense to use it for `number`. Instead, assume everything starts\n * from a 0 mediaSequence value and increment from there.\n *\n * Note that VHS currently doesn't use the `number` property, but it can be helpful for\n * debugging and making sense of the manifest.\n *\n * For live playlists, to account for values increasing in manifests when periods are\n * removed on refreshes, merging logic should be used to update the numbers to their\n * appropriate values (to ensure they're sequential and increasing).\n *\n * @param {Object[]} playlists - the playlists to update\n * @param {TimelineStart[]} timelineStarts - the timeline starts for the manifest\n */\n\nvar addMediaSequenceValues = function addMediaSequenceValues(playlists, timelineStarts) {\n  // increment all segments sequentially\n  playlists.forEach(function (playlist) {\n    playlist.mediaSequence = 0;\n    playlist.discontinuitySequence = timelineStarts.findIndex(function (_ref13) {\n      var timeline = _ref13.timeline;\n      return timeline === playlist.timeline;\n    });\n    if (!playlist.segments) {\n      return;\n    }\n    playlist.segments.forEach(function (segment, index) {\n      segment.number = index;\n    });\n  });\n};\n/**\n * Given a media group object, flattens all playlists within the media group into a single\n * array.\n *\n * @param {Object} mediaGroupObject - the media group object\n *\n * @return {Object[]}\n *         The media group playlists\n */\n\nvar flattenMediaGroupPlaylists = function flattenMediaGroupPlaylists(mediaGroupObject) {\n  if (!mediaGroupObject) {\n    return [];\n  }\n  return Object.keys(mediaGroupObject).reduce(function (acc, label) {\n    var labelContents = mediaGroupObject[label];\n    return acc.concat(labelContents.playlists);\n  }, []);\n};\nvar toM3u8 = function toM3u8(_ref14) {\n  var _mediaGroups;\n  var dashPlaylists = _ref14.dashPlaylists,\n    locations = _ref14.locations,\n    contentSteering = _ref14.contentSteering,\n    _ref14$sidxMapping = _ref14.sidxMapping,\n    sidxMapping = _ref14$sidxMapping === void 0 ? {} : _ref14$sidxMapping,\n    previousManifest = _ref14.previousManifest,\n    eventStream = _ref14.eventStream;\n  if (!dashPlaylists.length) {\n    return {};\n  } // grab all main manifest attributes\n\n  var _dashPlaylists$0$attr = dashPlaylists[0].attributes,\n    duration = _dashPlaylists$0$attr.sourceDuration,\n    type = _dashPlaylists$0$attr.type,\n    suggestedPresentationDelay = _dashPlaylists$0$attr.suggestedPresentationDelay,\n    minimumUpdatePeriod = _dashPlaylists$0$attr.minimumUpdatePeriod;\n  var videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);\n  var audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));\n  var vttPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(vttOnly));\n  var captions = dashPlaylists.map(function (playlist) {\n    return playlist.attributes.captionServices;\n  }).filter(Boolean);\n  var manifest = {\n    allowCache: true,\n    discontinuityStarts: [],\n    segments: [],\n    endList: true,\n    mediaGroups: (_mediaGroups = {\n      AUDIO: {},\n      VIDEO: {}\n    }, _defineProperty(_mediaGroups, 'CLOSED-CAPTIONS', {}), _defineProperty(_mediaGroups, \"SUBTITLES\", {}), _mediaGroups),\n    uri: '',\n    duration: duration,\n    playlists: addSidxSegmentsToPlaylists(videoPlaylists, sidxMapping)\n  };\n  if (minimumUpdatePeriod >= 0) {\n    manifest.minimumUpdatePeriod = minimumUpdatePeriod * 1000;\n  }\n  if (locations) {\n    manifest.locations = locations;\n  }\n  if (contentSteering) {\n    manifest.contentSteering = contentSteering;\n  }\n  if (type === 'dynamic') {\n    manifest.suggestedPresentationDelay = suggestedPresentationDelay;\n  }\n  if (eventStream && eventStream.length > 0) {\n    manifest.eventStream = eventStream;\n  }\n  var isAudioOnly = manifest.playlists.length === 0;\n  var organizedAudioGroup = audioPlaylists.length ? organizeAudioPlaylists(audioPlaylists, sidxMapping, isAudioOnly) : null;\n  var organizedVttGroup = vttPlaylists.length ? organizeVttPlaylists(vttPlaylists, sidxMapping) : null;\n  var formattedPlaylists = videoPlaylists.concat(flattenMediaGroupPlaylists(organizedAudioGroup), flattenMediaGroupPlaylists(organizedVttGroup));\n  var playlistTimelineStarts = formattedPlaylists.map(function (_ref15) {\n    var timelineStarts = _ref15.timelineStarts;\n    return timelineStarts;\n  });\n  manifest.timelineStarts = getUniqueTimelineStarts(playlistTimelineStarts);\n  addMediaSequenceValues(formattedPlaylists, manifest.timelineStarts);\n  if (organizedAudioGroup) {\n    manifest.mediaGroups.AUDIO.audio = organizedAudioGroup;\n  }\n  if (organizedVttGroup) {\n    manifest.mediaGroups.SUBTITLES.subs = organizedVttGroup;\n  }\n  if (captions.length) {\n    manifest.mediaGroups['CLOSED-CAPTIONS'].cc = organizeCaptionServices(captions);\n  }\n  if (previousManifest) {\n    return positionManifestOnTimeline({\n      oldManifest: previousManifest,\n      newManifest: manifest\n    });\n  }\n  return manifest;\n};\n\n/**\n * Calculates the R (repetition) value for a live stream (for the final segment\n * in a manifest where the r value is negative 1)\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {number} time\n *        current time (typically the total time up until the final segment)\n * @param {number} duration\n *        duration property for the given <S />\n *\n * @return {number}\n *        R value to reach the end of the given period\n */\nvar getLiveRValue = function getLiveRValue(attributes, time, duration) {\n  var NOW = attributes.NOW,\n    clientOffset = attributes.clientOffset,\n    availabilityStartTime = attributes.availabilityStartTime,\n    _attributes$timescale5 = attributes.timescale,\n    timescale = _attributes$timescale5 === void 0 ? 1 : _attributes$timescale5,\n    _attributes$periodSta2 = attributes.periodStart,\n    periodStart = _attributes$periodSta2 === void 0 ? 0 : _attributes$periodSta2,\n    _attributes$minimumUp2 = attributes.minimumUpdatePeriod,\n    minimumUpdatePeriod = _attributes$minimumUp2 === void 0 ? 0 : _attributes$minimumUp2;\n  var now = (NOW + clientOffset) / 1000;\n  var periodStartWC = availabilityStartTime + periodStart;\n  var periodEndWC = now + minimumUpdatePeriod;\n  var periodDuration = periodEndWC - periodStartWC;\n  return Math.ceil((periodDuration * timescale - time) / duration);\n};\n/**\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\n * timing and duration\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nvar parseByTimeline = function parseByTimeline(attributes, segmentTimeline) {\n  var type = attributes.type,\n    _attributes$minimumUp3 = attributes.minimumUpdatePeriod,\n    minimumUpdatePeriod = _attributes$minimumUp3 === void 0 ? 0 : _attributes$minimumUp3,\n    _attributes$media = attributes.media,\n    media = _attributes$media === void 0 ? '' : _attributes$media,\n    sourceDuration = attributes.sourceDuration,\n    _attributes$timescale6 = attributes.timescale,\n    timescale = _attributes$timescale6 === void 0 ? 1 : _attributes$timescale6,\n    _attributes$startNumb2 = attributes.startNumber,\n    startNumber = _attributes$startNumb2 === void 0 ? 1 : _attributes$startNumb2,\n    timeline = attributes.periodStart;\n  var segments = [];\n  var time = -1;\n  for (var sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\n    var S = segmentTimeline[sIndex];\n    var duration = S.d;\n    var repeat = S.r || 0;\n    var segmentTime = S.t || 0;\n    if (time < 0) {\n      // first segment\n      time = segmentTime;\n    }\n    if (segmentTime && segmentTime > time) {\n      // discontinuity\n      // TODO: How to handle this type of discontinuity\n      // timeline++ here would treat it like HLS discontuity and content would\n      // get appended without gap\n      // E.G.\n      //  <S t=\"0\" d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S t=\"5\" d=\"1\" />\n      // would have $Time$ values of [0, 1, 2, 5]\n      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\n      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\n      // does the value of sourceDuration consider this when calculating arbitrary\n      // negative @r repeat value?\n      // E.G. Same elements as above with this added at the end\n      //  <S d=\"1\" r=\"-1\" />\n      //  with a sourceDuration of 10\n      // Would the 2 gaps be included in the time duration calculations resulting in\n      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\n      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\n      time = segmentTime;\n    }\n    var count = void 0;\n    if (repeat < 0) {\n      var nextS = sIndex + 1;\n      if (nextS === segmentTimeline.length) {\n        // last segment\n        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\n          count = getLiveRValue(attributes, time, duration);\n        } else {\n          // TODO: This may be incorrect depending on conclusion of TODO above\n          count = (sourceDuration * timescale - time) / duration;\n        }\n      } else {\n        count = (segmentTimeline[nextS].t - time) / duration;\n      }\n    } else {\n      count = repeat + 1;\n    }\n    var end = startNumber + segments.length + count;\n    var number = startNumber + segments.length;\n    while (number < end) {\n      segments.push({\n        number: number,\n        duration: duration / timescale,\n        time: time,\n        timeline: timeline\n      });\n      time += duration;\n      number++;\n    }\n  }\n  return segments;\n};\nvar identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\n/**\n * Replaces template identifiers with corresponding values. To be used as the callback\n * for String.prototype.replace\n *\n * @name replaceCallback\n * @function\n * @param {string} match\n *        Entire match of identifier\n * @param {string} identifier\n *        Name of matched identifier\n * @param {string} format\n *        Format tag string. Its presence indicates that padding is expected\n * @param {string} width\n *        Desired length of the replaced value. Values less than this width shall be left\n *        zero padded\n * @return {string}\n *         Replacement for the matched identifier\n */\n\n/**\n * Returns a function to be used as a callback for String.prototype.replace to replace\n * template identifiers\n *\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {replaceCallback}\n *         Callback to be used with String.prototype.replace to replace identifiers\n */\n\nvar identifierReplacement = function identifierReplacement(values) {\n  return function (match, identifier, format, width) {\n    if (match === '$$') {\n      // escape sequence\n      return '$';\n    }\n    if (typeof values[identifier] === 'undefined') {\n      return match;\n    }\n    var value = '' + values[identifier];\n    if (identifier === 'RepresentationID') {\n      // Format tag shall not be present with RepresentationID\n      return value;\n    }\n    if (!format) {\n      width = 1;\n    } else {\n      width = parseInt(width, 10);\n    }\n    if (value.length >= width) {\n      return value;\n    }\n    return \"\".concat(new Array(width - value.length + 1).join('0')).concat(value);\n  };\n};\n/**\n * Constructs a segment url from a template string\n *\n * @param {string} url\n *        Template string to construct url from\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {string}\n *         Segment url with identifiers replaced\n */\n\nvar constructTemplateUrl = function constructTemplateUrl(url, values) {\n  return url.replace(identifierPattern, identifierReplacement(values));\n};\n/**\n * Generates a list of objects containing timing and duration information about each\n * segment needed to generate segment uris and the complete segment object\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nvar parseTemplateInfo = function parseTemplateInfo(attributes, segmentTimeline) {\n  if (!attributes.duration && !segmentTimeline) {\n    // if neither @duration or SegmentTimeline are present, then there shall be exactly\n    // one media segment\n    return [{\n      number: attributes.startNumber || 1,\n      duration: attributes.sourceDuration,\n      time: 0,\n      timeline: attributes.periodStart\n    }];\n  }\n  if (attributes.duration) {\n    return parseByDuration(attributes);\n  }\n  return parseByTimeline(attributes, segmentTimeline);\n};\n/**\n * Generates a list of segments using information provided by the SegmentTemplate element\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object[]}\n *         List of segment objects\n */\n\nvar segmentsFromTemplate = function segmentsFromTemplate(attributes, segmentTimeline) {\n  var templateValues = {\n    RepresentationID: attributes.id,\n    Bandwidth: attributes.bandwidth || 0\n  };\n  var _attributes$initializ2 = attributes.initialization,\n    initialization = _attributes$initializ2 === void 0 ? {\n      sourceURL: '',\n      range: ''\n    } : _attributes$initializ2;\n  var mapSegment = urlTypeToSegment({\n    baseUrl: attributes.baseUrl,\n    source: constructTemplateUrl(initialization.sourceURL, templateValues),\n    range: initialization.range\n  });\n  var segments = parseTemplateInfo(attributes, segmentTimeline);\n  return segments.map(function (segment) {\n    templateValues.Number = segment.number;\n    templateValues.Time = segment.time;\n    var uri = constructTemplateUrl(attributes.media || '', templateValues); // See DASH spec section 5.3.9.2.2\n    // - if timescale isn't present on any level, default to 1.\n\n    var timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n    var presentationTimeOffset = attributes.presentationTimeOffset || 0;\n    var presentationTime =\n    // Even if the @t attribute is not specified for the segment, segment.time is\n    // calculated in mpd-parser prior to this, so it's assumed to be available.\n    attributes.periodStart + (segment.time - presentationTimeOffset) / timescale;\n    var map = {\n      uri: uri,\n      timeline: segment.timeline,\n      duration: segment.duration,\n      resolvedUri: resolveUrl(attributes.baseUrl || '', uri),\n      map: mapSegment,\n      number: segment.number,\n      presentationTime: presentationTime\n    };\n    return map;\n  });\n};\n\n/**\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\n * to an object that matches the output of a segment in videojs/mpd-parser\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object} segmentUrl\n *   <SegmentURL> node to translate into a segment object\n * @return {Object} translated segment object\n */\n\nvar SegmentURLToSegmentObject = function SegmentURLToSegmentObject(attributes, segmentUrl) {\n  var baseUrl = attributes.baseUrl,\n    _attributes$initializ3 = attributes.initialization,\n    initialization = _attributes$initializ3 === void 0 ? {} : _attributes$initializ3;\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: segmentUrl.media,\n    range: segmentUrl.mediaRange\n  });\n  segment.map = initSegment;\n  return segment;\n};\n/**\n * Generates a list of segments using information provided by the SegmentList element\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object.<Array>} list of segments\n */\n\nvar segmentsFromList = function segmentsFromList(attributes, segmentTimeline) {\n  var duration = attributes.duration,\n    _attributes$segmentUr = attributes.segmentUrls,\n    segmentUrls = _attributes$segmentUr === void 0 ? [] : _attributes$segmentUr,\n    periodStart = attributes.periodStart; // Per spec (5.3.9.2.1) no way to determine segment duration OR\n  // if both SegmentTimeline and @duration are defined, it is outside of spec.\n\n  if (!duration && !segmentTimeline || duration && segmentTimeline) {\n    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\n  }\n  var segmentUrlMap = segmentUrls.map(function (segmentUrlObject) {\n    return SegmentURLToSegmentObject(attributes, segmentUrlObject);\n  });\n  var segmentTimeInfo;\n  if (duration) {\n    segmentTimeInfo = parseByDuration(attributes);\n  }\n  if (segmentTimeline) {\n    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\n  }\n  var segments = segmentTimeInfo.map(function (segmentTime, index) {\n    if (segmentUrlMap[index]) {\n      var segment = segmentUrlMap[index]; // See DASH spec section 5.3.9.2.2\n      // - if timescale isn't present on any level, default to 1.\n\n      var timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n      var presentationTimeOffset = attributes.presentationTimeOffset || 0;\n      segment.timeline = segmentTime.timeline;\n      segment.duration = segmentTime.duration;\n      segment.number = segmentTime.number;\n      segment.presentationTime = periodStart + (segmentTime.time - presentationTimeOffset) / timescale;\n      return segment;\n    } // Since we're mapping we should get rid of any blank segments (in case\n    // the given SegmentTimeline is handling for more elements than we have\n    // SegmentURLs for).\n  }).filter(function (segment) {\n    return segment;\n  });\n  return segments;\n};\nvar generateSegments = function generateSegments(_ref16) {\n  var attributes = _ref16.attributes,\n    segmentInfo = _ref16.segmentInfo;\n  var segmentAttributes;\n  var segmentsFn;\n  if (segmentInfo.template) {\n    segmentsFn = segmentsFromTemplate;\n    segmentAttributes = merge(attributes, segmentInfo.template);\n  } else if (segmentInfo.base) {\n    segmentsFn = segmentsFromBase;\n    segmentAttributes = merge(attributes, segmentInfo.base);\n  } else if (segmentInfo.list) {\n    segmentsFn = segmentsFromList;\n    segmentAttributes = merge(attributes, segmentInfo.list);\n  }\n  var segmentsInfo = {\n    attributes: attributes\n  };\n  if (!segmentsFn) {\n    return segmentsInfo;\n  }\n  var segments = segmentsFn(segmentAttributes, segmentInfo.segmentTimeline); // The @duration attribute will be used to determin the playlist's targetDuration which\n  // must be in seconds. Since we've generated the segment list, we no longer need\n  // @duration to be in @timescale units, so we can convert it here.\n\n  if (segmentAttributes.duration) {\n    var _segmentAttributes = segmentAttributes,\n      duration = _segmentAttributes.duration,\n      _segmentAttributes$ti = _segmentAttributes.timescale,\n      timescale = _segmentAttributes$ti === void 0 ? 1 : _segmentAttributes$ti;\n    segmentAttributes.duration = duration / timescale;\n  } else if (segments.length) {\n    // if there is no @duration attribute, use the largest segment duration as\n    // as target duration\n    segmentAttributes.duration = segments.reduce(function (max, segment) {\n      return Math.max(max, Math.ceil(segment.duration));\n    }, 0);\n  } else {\n    segmentAttributes.duration = 0;\n  }\n  segmentsInfo.attributes = segmentAttributes;\n  segmentsInfo.segments = segments; // This is a sidx box without actual segment information\n\n  if (segmentInfo.base && segmentAttributes.indexRange) {\n    segmentsInfo.sidx = segments[0];\n    segmentsInfo.segments = [];\n  }\n  return segmentsInfo;\n};\nvar toPlaylists = function toPlaylists(representations) {\n  return representations.map(generateSegments);\n};\nvar findChildren = function findChildren(element, name) {\n  return from(element.childNodes).filter(function (_ref17) {\n    var tagName = _ref17.tagName;\n    return tagName === name;\n  });\n};\nvar getContent = function getContent(element) {\n  return element.textContent.trim();\n};\n\n/**\n * Converts the provided string that may contain a division operation to a number.\n *\n * @param {string} value - the provided string value\n *\n * @return {number} the parsed string value\n */\nvar parseDivisionValue = function parseDivisionValue(value) {\n  return parseFloat(value.split('/').reduce(function (prev, current) {\n    return prev / current;\n  }));\n};\nvar parseDuration = function parseDuration(str) {\n  var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\n  var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\n  var SECONDS_IN_DAY = 24 * 60 * 60;\n  var SECONDS_IN_HOUR = 60 * 60;\n  var SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S\n\n  var durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\n  var match = durationRegex.exec(str);\n  if (!match) {\n    return 0;\n  }\n  var _match$slice = match.slice(1),\n    _match$slice2 = _slicedToArray(_match$slice, 6),\n    year = _match$slice2[0],\n    month = _match$slice2[1],\n    day = _match$slice2[2],\n    hour = _match$slice2[3],\n    minute = _match$slice2[4],\n    second = _match$slice2[5];\n  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\n};\nvar parseDate = function parseDate(str) {\n  // Date format without timezone according to ISO 8601\n  // YYY-MM-DDThh:mm:ss.ssssss\n  var dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is\n  // expressed by ending with 'Z'\n\n  if (dateRegex.test(str)) {\n    str += 'Z';\n  }\n  return Date.parse(str);\n};\nvar parsers = {\n  /**\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\n   * as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  mediaPresentationDuration: function mediaPresentationDuration(value) {\n    return parseDuration(value);\n  },\n  /**\n   * Specifies the Segment availability start time for all Segments referred to in this\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\n   * time. Format is a date string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The date as seconds from unix epoch\n   */\n  availabilityStartTime: function availabilityStartTime(value) {\n    return parseDate(value) / 1000;\n  },\n  /**\n   * Specifies the smallest period between potential changes to the MPD. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  minimumUpdatePeriod: function minimumUpdatePeriod(value) {\n    return parseDuration(value);\n  },\n  /**\n   * Specifies the suggested presentation delay. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  suggestedPresentationDelay: function suggestedPresentationDelay(value) {\n    return parseDuration(value);\n  },\n  /**\n   * specifices the type of mpd. Can be either \"static\" or \"dynamic\"\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   *\n   * @return {string}\n   *         The type as a string\n   */\n  type: function type(value) {\n    return value;\n  },\n  /**\n   * Specifies the duration of the smallest time shifting buffer for any Representation\n   * in the MPD. Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  timeShiftBufferDepth: function timeShiftBufferDepth(value) {\n    return parseDuration(value);\n  },\n  /**\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\n   * Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  start: function start(value) {\n    return parseDuration(value);\n  },\n  /**\n   * Specifies the width of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed width\n   */\n  width: function width(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the height of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed height\n   */\n  height: function height(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the bitrate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed bandwidth\n   */\n  bandwidth: function bandwidth(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the frame rate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed frame rate\n   */\n  frameRate: function frameRate(value) {\n    return parseDivisionValue(value);\n  },\n  /**\n   * Specifies the number of the first Media Segment in this Representation in the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  startNumber: function startNumber(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the timescale in units per seconds\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed timescale\n   */\n  timescale: function timescale(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the presentationTimeOffset.\n   *\n   * @param {string} value\n   *        value of the attribute as a string\n   *\n   * @return {number}\n   *         The parsed presentationTimeOffset\n   */\n  presentationTimeOffset: function presentationTimeOffset(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the constant approximate Segment duration\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\n   *       specifies the duration of the Period. This attribute is currently not\n   *       supported by the rest of the parser, however we still check for it to prevent\n   *       errors.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  duration: function duration(value) {\n    var parsedValue = parseInt(value, 10);\n    if (isNaN(parsedValue)) {\n      return parseDuration(value);\n    }\n    return parsedValue;\n  },\n  /**\n   * Specifies the Segment duration, in units of the value of the @timescale.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  d: function d(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\n   * starts relative to the beginning of the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed time\n   */\n  t: function t(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the repeat count of the number of following contiguous Segments with the\n   * same duration expressed by the value of @d\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  r: function r(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the presentationTime.\n   *\n   * @param {string} value\n   *        value of the attribute as a string\n   *\n   * @return {number}\n   *         The parsed presentationTime\n   */\n  presentationTime: function presentationTime(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\n   * as a string\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {string}\n   *         Unparsed value\n   */\n  DEFAULT: function DEFAULT(value) {\n    return value;\n  }\n};\n/**\n * Gets all the attributes and values of the provided node, parses attributes with known\n * types, and returns an object with attribute names mapped to values.\n *\n * @param {Node} el\n *        The node to parse attributes from\n * @return {Object}\n *         Object with all attributes of el parsed\n */\n\nvar parseAttributes = function parseAttributes(el) {\n  if (!(el && el.attributes)) {\n    return {};\n  }\n  return from(el.attributes).reduce(function (a, e) {\n    var parseFn = parsers[e.name] || parsers.DEFAULT;\n    a[e.name] = parseFn(e.value);\n    return a;\n  }, {});\n};\nvar keySystemsMap = {\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime',\n  // ISO_IEC 23009-1_2022 5.8.5.2.2 The mp4 Protection Scheme\n  'urn:mpeg:dash:mp4protection:2011': 'mp4protection'\n};\n/**\n * Builds a list of urls that is the product of the reference urls and BaseURL values\n *\n * @param {Object[]} references\n *        List of objects containing the reference URL as well as its attributes\n * @param {Node[]} baseUrlElements\n *        List of BaseURL nodes from the mpd\n * @return {Object[]}\n *         List of objects with resolved urls and attributes\n */\n\nvar buildBaseUrls = function buildBaseUrls(references, baseUrlElements) {\n  if (!baseUrlElements.length) {\n    return references;\n  }\n  return flatten(references.map(function (reference) {\n    return baseUrlElements.map(function (baseUrlElement) {\n      var initialBaseUrl = getContent(baseUrlElement);\n      var resolvedBaseUrl = resolveUrl(reference.baseUrl, initialBaseUrl);\n      var finalBaseUrl = merge(parseAttributes(baseUrlElement), {\n        baseUrl: resolvedBaseUrl\n      }); // If the URL is resolved, we want to get the serviceLocation from the reference\n      // assuming there is no serviceLocation on the initialBaseUrl\n\n      if (resolvedBaseUrl !== initialBaseUrl && !finalBaseUrl.serviceLocation && reference.serviceLocation) {\n        finalBaseUrl.serviceLocation = reference.serviceLocation;\n      }\n      return finalBaseUrl;\n    });\n  }));\n};\n/**\n * Contains all Segment information for its containing AdaptationSet\n *\n * @typedef {Object} SegmentInformation\n * @property {Object|undefined} template\n *           Contains the attributes for the SegmentTemplate node\n * @property {Object[]|undefined} segmentTimeline\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\n * @property {Object|undefined} list\n *           Contains the attributes for the SegmentList node\n * @property {Object|undefined} base\n *           Contains the attributes for the SegmentBase node\n */\n\n/**\n * Returns all available Segment information contained within the AdaptationSet node\n *\n * @param {Node} adaptationSet\n *        The AdaptationSet node to get Segment information from\n * @return {SegmentInformation}\n *         The Segment information contained within the provided AdaptationSet\n */\n\nvar getSegmentInformation = function getSegmentInformation(adaptationSet) {\n  var segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\n  var segmentList = findChildren(adaptationSet, 'SegmentList')[0];\n  var segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(function (s) {\n    return merge({\n      tag: 'SegmentURL'\n    }, parseAttributes(s));\n  });\n  var segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\n  var segmentTimelineParentNode = segmentList || segmentTemplate;\n  var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\n  var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\n  var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0]; // SegmentTemplate is handled slightly differently, since it can have both\n  // @initialization and an <Initialization> node.  @initialization can be templated,\n  // while the node can have a url and range specified.  If the <SegmentTemplate> has\n  // both @initialization and an <Initialization> subelement we opt to override with\n  // the node, as this interaction is not defined in the spec.\n\n  var template = segmentTemplate && parseAttributes(segmentTemplate);\n  if (template && segmentInitialization) {\n    template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\n  } else if (template && template.initialization) {\n    // If it is @initialization we convert it to an object since this is the format that\n    // later functions will rely on for the initialization segment.  This is only valid\n    // for <SegmentTemplate>\n    template.initialization = {\n      sourceURL: template.initialization\n    };\n  }\n  var segmentInfo = {\n    template: template,\n    segmentTimeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(function (s) {\n      return parseAttributes(s);\n    }),\n    list: segmentList && merge(parseAttributes(segmentList), {\n      segmentUrls: segmentUrls,\n      initialization: parseAttributes(segmentInitialization)\n    }),\n    base: segmentBase && merge(parseAttributes(segmentBase), {\n      initialization: parseAttributes(segmentInitialization)\n    })\n  };\n  Object.keys(segmentInfo).forEach(function (key) {\n    if (!segmentInfo[key]) {\n      delete segmentInfo[key];\n    }\n  });\n  return segmentInfo;\n};\n/**\n * Contains Segment information and attributes needed to construct a Playlist object\n * from a Representation\n *\n * @typedef {Object} RepresentationInformation\n * @property {SegmentInformation} segmentInfo\n *           Segment information for this Representation\n * @property {Object} attributes\n *           Inherited attributes for this Representation\n */\n\n/**\n * Maps a Representation node to an object containing Segment information and attributes\n *\n * @name inheritBaseUrlsCallback\n * @function\n * @param {Node} representation\n *        Representation node from the mpd\n * @return {RepresentationInformation}\n *         Representation information needed to construct a Playlist object\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\n * Segment information and attributes using inherited BaseURL nodes.\n *\n * @param {Object} adaptationSetAttributes\n *        Contains attributes inherited by the AdaptationSet\n * @param {Object[]} adaptationSetBaseUrls\n *        List of objects containing resolved base URLs and attributes\n *        inherited by the AdaptationSet\n * @param {SegmentInformation} adaptationSetSegmentInfo\n *        Contains Segment information for the AdaptationSet\n * @return {inheritBaseUrlsCallback}\n *         Callback map function\n */\n\nvar inheritBaseUrls = function inheritBaseUrls(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {\n  return function (representation) {\n    var repBaseUrlElements = findChildren(representation, 'BaseURL');\n    var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\n    var attributes = merge(adaptationSetAttributes, parseAttributes(representation));\n    var representationSegmentInfo = getSegmentInformation(representation);\n    return repBaseUrls.map(function (baseUrl) {\n      return {\n        segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\n        attributes: merge(attributes, baseUrl)\n      };\n    });\n  };\n};\n/**\n * Tranforms a series of content protection nodes to\n * an object containing pssh data by key system\n *\n * @param {Node[]} contentProtectionNodes\n *        Content protection nodes\n * @return {Object}\n *        Object containing pssh data by key system\n */\n\nvar generateKeySystemInformation = function generateKeySystemInformation(contentProtectionNodes) {\n  return contentProtectionNodes.reduce(function (acc, node) {\n    var attributes = parseAttributes(node); // Although it could be argued that according to the UUID RFC spec the UUID string (a-f chars) should be generated\n    // as a lowercase string it also mentions it should be treated as case-insensitive on input. Since the key system\n    // UUIDs in the keySystemsMap are hardcoded as lowercase in the codebase there isn't any reason not to do\n    // .toLowerCase() on the input UUID string from the manifest (at least I could not think of one).\n\n    if (attributes.schemeIdUri) {\n      attributes.schemeIdUri = attributes.schemeIdUri.toLowerCase();\n    }\n    var keySystem = keySystemsMap[attributes.schemeIdUri];\n    if (keySystem) {\n      acc[keySystem] = {\n        attributes: attributes\n      };\n      var psshNode = findChildren(node, 'cenc:pssh')[0];\n      if (psshNode) {\n        var pssh = getContent(psshNode);\n        acc[keySystem].pssh = pssh && decodeB64ToUint8Array(pssh);\n      }\n    }\n    return acc;\n  }, {});\n}; // defined in ANSI_SCTE 214-1 2016\n\nvar parseCaptionServiceMetadata = function parseCaptionServiceMetadata(service) {\n  // 608 captions\n  if (service.schemeIdUri === 'urn:scte:dash:cc:cea-608:2015') {\n    var _values = typeof service.value !== 'string' ? [] : service.value.split(';');\n    return _values.map(function (value) {\n      var channel;\n      var language; // default language to value\n\n      language = value;\n      if (/^CC\\d=/.test(value)) {\n        var _value$split = value.split('=');\n        var _value$split2 = _slicedToArray(_value$split, 2);\n        channel = _value$split2[0];\n        language = _value$split2[1];\n      } else if (/^CC\\d$/.test(value)) {\n        channel = value;\n      }\n      return {\n        channel: channel,\n        language: language\n      };\n    });\n  } else if (service.schemeIdUri === 'urn:scte:dash:cc:cea-708:2015') {\n    var _values2 = typeof service.value !== 'string' ? [] : service.value.split(';');\n    return _values2.map(function (value) {\n      var flags = {\n        // service or channel number 1-63\n        'channel': undefined,\n        // language is a 3ALPHA per ISO 639.2/B\n        // field is required\n        'language': undefined,\n        // BIT 1/0 or ?\n        // default value is 1, meaning 16:9 aspect ratio, 0 is 4:3, ? is unknown\n        'aspectRatio': 1,\n        // BIT 1/0\n        // easy reader flag indicated the text is tailed to the needs of beginning readers\n        // default 0, or off\n        'easyReader': 0,\n        // BIT 1/0\n        // If 3d metadata is present (CEA-708.1) then 1\n        // default 0\n        '3D': 0\n      };\n      if (/=/.test(value)) {\n        var _value$split3 = value.split('='),\n          _value$split4 = _slicedToArray(_value$split3, 2),\n          channel = _value$split4[0],\n          _value$split4$ = _value$split4[1],\n          opts = _value$split4$ === void 0 ? '' : _value$split4$;\n        flags.channel = channel;\n        flags.language = value;\n        opts.split(',').forEach(function (opt) {\n          var _opt$split = opt.split(':'),\n            _opt$split2 = _slicedToArray(_opt$split, 2),\n            name = _opt$split2[0],\n            val = _opt$split2[1];\n          if (name === 'lang') {\n            flags.language = val; // er for easyReadery\n          } else if (name === 'er') {\n            flags.easyReader = Number(val); // war for wide aspect ratio\n          } else if (name === 'war') {\n            flags.aspectRatio = Number(val);\n          } else if (name === '3D') {\n            flags['3D'] = Number(val);\n          }\n        });\n      } else {\n        flags.language = value;\n      }\n      if (flags.channel) {\n        flags.channel = 'SERVICE' + flags.channel;\n      }\n      return flags;\n    });\n  }\n};\n/**\n * A map callback that will parse all event stream data for a collection of periods\n * DASH ISO_IEC_23009 5.10.2.2\n * https://dashif-documents.azurewebsites.net/Events/master/event.html#mpd-event-timing\n *\n * @param {PeriodInformation} period object containing necessary period information\n * @return a collection of parsed eventstream event objects\n */\n\nvar toEventStream = function toEventStream(period) {\n  // get and flatten all EventStreams tags and parse attributes and children\n  return flatten(findChildren(period.node, 'EventStream').map(function (eventStream) {\n    var eventStreamAttributes = parseAttributes(eventStream);\n    var schemeIdUri = eventStreamAttributes.schemeIdUri; // find all Events per EventStream tag and map to return objects\n\n    return findChildren(eventStream, 'Event').map(function (event) {\n      var eventAttributes = parseAttributes(event);\n      var presentationTime = eventAttributes.presentationTime || 0;\n      var timescale = eventStreamAttributes.timescale || 1;\n      var duration = eventAttributes.duration || 0;\n      var start = presentationTime / timescale + period.attributes.start;\n      return {\n        schemeIdUri: schemeIdUri,\n        value: eventStreamAttributes.value,\n        id: eventAttributes.id,\n        start: start,\n        end: start + duration / timescale,\n        messageData: getContent(event) || eventAttributes.messageData,\n        contentEncoding: eventStreamAttributes.contentEncoding,\n        presentationTimeOffset: eventStreamAttributes.presentationTimeOffset || 0\n      };\n    });\n  }));\n};\n/**\n * Maps an AdaptationSet node to a list of Representation information objects\n *\n * @name toRepresentationsCallback\n * @function\n * @param {Node} adaptationSet\n *        AdaptationSet node from the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\n * Representation information objects\n *\n * @param {Object} periodAttributes\n *        Contains attributes inherited by the Period\n * @param {Object[]} periodBaseUrls\n *        Contains list of objects with resolved base urls and attributes\n *        inherited by the Period\n * @param {string[]} periodSegmentInfo\n *        Contains Segment Information at the period level\n * @return {toRepresentationsCallback}\n *         Callback map function\n */\n\nvar toRepresentations = function toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo) {\n  return function (adaptationSet) {\n    var adaptationSetAttributes = parseAttributes(adaptationSet);\n    var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\n    var role = findChildren(adaptationSet, 'Role')[0];\n    var roleAttributes = {\n      role: parseAttributes(role)\n    };\n    var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\n    var accessibility = findChildren(adaptationSet, 'Accessibility')[0];\n    var captionServices = parseCaptionServiceMetadata(parseAttributes(accessibility));\n    if (captionServices) {\n      attrs = merge(attrs, {\n        captionServices: captionServices\n      });\n    }\n    var label = findChildren(adaptationSet, 'Label')[0];\n    if (label && label.childNodes.length) {\n      var labelVal = label.childNodes[0].nodeValue.trim();\n      attrs = merge(attrs, {\n        label: labelVal\n      });\n    }\n    var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\n    if (Object.keys(contentProtection).length) {\n      attrs = merge(attrs, {\n        contentProtection: contentProtection\n      });\n    }\n    var segmentInfo = getSegmentInformation(adaptationSet);\n    var representations = findChildren(adaptationSet, 'Representation');\n    var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\n    return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\n  };\n};\n/**\n * Contains all period information for mapping nodes onto adaptation sets.\n *\n * @typedef {Object} PeriodInformation\n * @property {Node} period.node\n *           Period node from the mpd\n * @property {Object} period.attributes\n *           Parsed period attributes from node plus any added\n */\n\n/**\n * Maps a PeriodInformation object to a list of Representation information objects for all\n * AdaptationSet nodes contained within the Period.\n *\n * @name toAdaptationSetsCallback\n * @function\n * @param {PeriodInformation} period\n *        Period object containing necessary period information\n * @param {number} periodStart\n *        Start time of the Period within the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\n * Representation information objects\n *\n * @param {Object} mpdAttributes\n *        Contains attributes inherited by the mpd\n  * @param {Object[]} mpdBaseUrls\n *        Contains list of objects with resolved base urls and attributes\n *        inherited by the mpd\n * @return {toAdaptationSetsCallback}\n *         Callback map function\n */\n\nvar toAdaptationSets = function toAdaptationSets(mpdAttributes, mpdBaseUrls) {\n  return function (period, index) {\n    var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period.node, 'BaseURL'));\n    var periodAttributes = merge(mpdAttributes, {\n      periodStart: period.attributes.start\n    });\n    if (typeof period.attributes.duration === 'number') {\n      periodAttributes.periodDuration = period.attributes.duration;\n    }\n    var adaptationSets = findChildren(period.node, 'AdaptationSet');\n    var periodSegmentInfo = getSegmentInformation(period.node);\n    return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\n  };\n};\n/**\n * Tranforms an array of content steering nodes into an object\n * containing CDN content steering information from the MPD manifest.\n *\n * For more information on the DASH spec for Content Steering parsing, see:\n * https://dashif.org/docs/DASH-IF-CTS-00XX-Content-Steering-Community-Review.pdf\n *\n * @param {Node[]} contentSteeringNodes\n *        Content steering nodes\n * @param {Function} eventHandler\n *        The event handler passed into the parser options to handle warnings\n * @return {Object}\n *        Object containing content steering data\n */\n\nvar generateContentSteeringInformation = function generateContentSteeringInformation(contentSteeringNodes, eventHandler) {\n  // If there are more than one ContentSteering tags, throw an error\n  if (contentSteeringNodes.length > 1) {\n    eventHandler({\n      type: 'warn',\n      message: 'The MPD manifest should contain no more than one ContentSteering tag'\n    });\n  } // Return a null value if there are no ContentSteering tags\n\n  if (!contentSteeringNodes.length) {\n    return null;\n  }\n  var infoFromContentSteeringTag = merge({\n    serverURL: getContent(contentSteeringNodes[0])\n  }, parseAttributes(contentSteeringNodes[0])); // Converts `queryBeforeStart` to a boolean, as well as setting the default value\n  // to `false` if it doesn't exist\n\n  infoFromContentSteeringTag.queryBeforeStart = infoFromContentSteeringTag.queryBeforeStart === 'true';\n  return infoFromContentSteeringTag;\n};\n/**\n * Gets Period@start property for a given period.\n *\n * @param {Object} options\n *        Options object\n * @param {Object} options.attributes\n *        Period attributes\n * @param {Object} [options.priorPeriodAttributes]\n *        Prior period attributes (if prior period is available)\n * @param {string} options.mpdType\n *        The MPD@type these periods came from\n * @return {number|null}\n *         The period start, or null if it's an early available period or error\n */\n\nvar getPeriodStart = function getPeriodStart(_ref18) {\n  var attributes = _ref18.attributes,\n    priorPeriodAttributes = _ref18.priorPeriodAttributes,\n    mpdType = _ref18.mpdType;\n  // Summary of period start time calculation from DASH spec section 5.3.2.1\n  //\n  // A period's start is the first period's start + time elapsed after playing all\n  // prior periods to this one. Periods continue one after the other in time (without\n  // gaps) until the end of the presentation.\n  //\n  // The value of Period@start should be:\n  // 1. if Period@start is present: value of Period@start\n  // 2. if previous period exists and it has @duration: previous Period@start +\n  //    previous Period@duration\n  // 3. if this is first period and MPD@type is 'static': 0\n  // 4. in all other cases, consider the period an \"early available period\" (note: not\n  //    currently supported)\n  // (1)\n  if (typeof attributes.start === 'number') {\n    return attributes.start;\n  } // (2)\n\n  if (priorPeriodAttributes && typeof priorPeriodAttributes.start === 'number' && typeof priorPeriodAttributes.duration === 'number') {\n    return priorPeriodAttributes.start + priorPeriodAttributes.duration;\n  } // (3)\n\n  if (!priorPeriodAttributes && mpdType === 'static') {\n    return 0;\n  } // (4)\n  // There is currently no logic for calculating the Period@start value if there is\n  // no Period@start or prior Period@start and Period@duration available. This is not made\n  // explicit by the DASH interop guidelines or the DASH spec, however, since there's\n  // nothing about any other resolution strategies, it's implied. Thus, this case should\n  // be considered an early available period, or error, and null should suffice for both\n  // of those cases.\n\n  return null;\n};\n/**\n * Traverses the mpd xml tree to generate a list of Representation information objects\n * that have inherited attributes from parent nodes\n *\n * @param {Node} mpd\n *        The root node of the mpd\n * @param {Object} options\n *        Available options for inheritAttributes\n * @param {string} options.manifestUri\n *        The uri source of the mpd\n * @param {number} options.NOW\n *        Current time per DASH IOP.  Default is current time in ms since epoch\n * @param {number} options.clientOffset\n *        Client time difference from NOW (in milliseconds)\n * @return {RepresentationInformation[]}\n *         List of objects containing Representation information\n */\n\nvar inheritAttributes = function inheritAttributes(mpd) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$manifestUri = options.manifestUri,\n    manifestUri = _options$manifestUri === void 0 ? '' : _options$manifestUri,\n    _options$NOW = options.NOW,\n    NOW = _options$NOW === void 0 ? Date.now() : _options$NOW,\n    _options$clientOffset = options.clientOffset,\n    clientOffset = _options$clientOffset === void 0 ? 0 : _options$clientOffset,\n    _options$eventHandler = options.eventHandler,\n    eventHandler = _options$eventHandler === void 0 ? function () {} : _options$eventHandler;\n  var periodNodes = findChildren(mpd, 'Period');\n  if (!periodNodes.length) {\n    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\n  }\n  var locations = findChildren(mpd, 'Location');\n  var mpdAttributes = parseAttributes(mpd);\n  var mpdBaseUrls = buildBaseUrls([{\n    baseUrl: manifestUri\n  }], findChildren(mpd, 'BaseURL'));\n  var contentSteeringNodes = findChildren(mpd, 'ContentSteering'); // See DASH spec section 5.3.1.2, Semantics of MPD element. Default type to 'static'.\n\n  mpdAttributes.type = mpdAttributes.type || 'static';\n  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\n  mpdAttributes.NOW = NOW;\n  mpdAttributes.clientOffset = clientOffset;\n  if (locations.length) {\n    mpdAttributes.locations = locations.map(getContent);\n  }\n  var periods = []; // Since toAdaptationSets acts on individual periods right now, the simplest approach to\n  // adding properties that require looking at prior periods is to parse attributes and add\n  // missing ones before toAdaptationSets is called. If more such properties are added, it\n  // may be better to refactor toAdaptationSets.\n\n  periodNodes.forEach(function (node, index) {\n    var attributes = parseAttributes(node); // Use the last modified prior period, as it may contain added information necessary\n    // for this period.\n\n    var priorPeriod = periods[index - 1];\n    attributes.start = getPeriodStart({\n      attributes: attributes,\n      priorPeriodAttributes: priorPeriod ? priorPeriod.attributes : null,\n      mpdType: mpdAttributes.type\n    });\n    periods.push({\n      node: node,\n      attributes: attributes\n    });\n  });\n  return {\n    locations: mpdAttributes.locations,\n    contentSteeringInfo: generateContentSteeringInformation(contentSteeringNodes, eventHandler),\n    // TODO: There are occurences where this `representationInfo` array contains undesired\n    // duplicates. This generally occurs when there are multiple BaseURL nodes that are\n    // direct children of the MPD node. When we attempt to resolve URLs from a combination of the\n    // parent BaseURL and a child BaseURL, and the value does not resolve,\n    // we end up returning the child BaseURL multiple times.\n    // We need to determine a way to remove these duplicates in a safe way.\n    // See: https://github.com/videojs/mpd-parser/pull/17#discussion_r162750527\n    representationInfo: flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls))),\n    eventStream: flatten(periods.map(toEventStream))\n  };\n};\nvar stringToMpdXml = function stringToMpdXml(manifestString) {\n  if (manifestString === '') {\n    throw new Error(errors.DASH_EMPTY_MANIFEST);\n  }\n  var parser = new DOMParser();\n  var xml;\n  var mpd;\n  try {\n    xml = parser.parseFromString(manifestString, 'application/xml');\n    mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\n  } catch (e) {// ie 11 throws on invalid xml\n  }\n  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\n    throw new Error(errors.DASH_INVALID_XML);\n  }\n  return mpd;\n};\n\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} mpd\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\nvar parseUTCTimingScheme = function parseUTCTimingScheme(mpd) {\n  var UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\n  if (!UTCTimingNode) {\n    return null;\n  }\n  var attributes = parseAttributes(UTCTimingNode);\n  switch (attributes.schemeIdUri) {\n    case 'urn:mpeg:dash:utc:http-head:2014':\n    case 'urn:mpeg:dash:utc:http-head:2012':\n      attributes.method = 'HEAD';\n      break;\n    case 'urn:mpeg:dash:utc:http-xsdate:2014':\n    case 'urn:mpeg:dash:utc:http-iso:2014':\n    case 'urn:mpeg:dash:utc:http-xsdate:2012':\n    case 'urn:mpeg:dash:utc:http-iso:2012':\n      attributes.method = 'GET';\n      break;\n    case 'urn:mpeg:dash:utc:direct:2014':\n    case 'urn:mpeg:dash:utc:direct:2012':\n      attributes.method = 'DIRECT';\n      attributes.value = Date.parse(attributes.value);\n      break;\n    case 'urn:mpeg:dash:utc:http-ntp:2014':\n    case 'urn:mpeg:dash:utc:ntp:2014':\n    case 'urn:mpeg:dash:utc:sntp:2014':\n    default:\n      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\n  }\n  return attributes;\n};\nvar VERSION = version;\n/*\n * Given a DASH manifest string and options, parses the DASH manifest into an object in the\n * form outputed by m3u8-parser and accepted by videojs/http-streaming.\n *\n * For live DASH manifests, if `previousManifest` is provided in options, then the newly\n * parsed DASH manifest will have its media sequence and discontinuity sequence values\n * updated to reflect its position relative to the prior manifest.\n *\n * @param {string} manifestString - the DASH manifest as a string\n * @param {options} [options] - any options\n *\n * @return {Object} the manifest object\n */\n\nvar parse = function parse(manifestString) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var parsedManifestInfo = inheritAttributes(stringToMpdXml(manifestString), options);\n  var playlists = toPlaylists(parsedManifestInfo.representationInfo);\n  return toM3u8({\n    dashPlaylists: playlists,\n    locations: parsedManifestInfo.locations,\n    contentSteering: parsedManifestInfo.contentSteeringInfo,\n    sidxMapping: options.sidxMapping,\n    previousManifest: options.previousManifest,\n    eventStream: parsedManifestInfo.eventStream\n  });\n};\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} manifestString\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\nvar parseUTCTiming = function parseUTCTiming(manifestString) {\n  return parseUTCTimingScheme(stringToMpdXml(manifestString));\n};\nexport { VERSION, addSidxSegmentsToPlaylist$1 as addSidxSegmentsToPlaylist, generateSidxKey, inheritAttributes, parse, parseUTCTiming, stringToMpdXml, toM3u8, toPlaylists };","map":{"version":3,"names":["resolveUrl","window","forEachMediaGroup","decodeB64ToUint8Array","DOMParser","version","isObject","obj","merge","_len","arguments","length","objects","Array","_key","reduce","result","source","Object","keys","forEach","key","isArray","concat","values","o","map","k","range","start","end","i","push","flatten","lists","x","y","from","list","findIndexes","l","a","e","union","keyFunction","acc","el","errors","INVALID_NUMBER_OF_PERIOD","INVALID_NUMBER_OF_CONTENT_STEERING","DASH_EMPTY_MANIFEST","DASH_INVALID_XML","NO_BASE_URL","MISSING_SEGMENT_INFORMATION","SEGMENT_TIME_UNSPECIFIED","UNSUPPORTED_UTC_TIMING_SCHEME","urlTypeToSegment","_ref","_ref$baseUrl","baseUrl","_ref$source","_ref$range","_ref$indexRange","indexRange","segment","uri","resolvedUri","rangeStr","ranges","split","startRange","BigInt","parseInt","endRange","Number","MAX_SAFE_INTEGER","byterange","offset","byteRangeToString","parseEndNumber","endNumber","isNaN","segmentRange","static","_static","attributes","duration","_attributes$timescale","timescale","sourceDuration","periodDuration","segmentDuration","dynamic","NOW","clientOffset","availabilityStartTime","_attributes$timescale2","_attributes$periodSta","periodStart","_attributes$minimumUp","minimumUpdatePeriod","_attributes$timeShift","timeShiftBufferDepth","Infinity","now","periodStartWC","periodEndWC","segmentCount","Math","ceil","availableStart","floor","availableEnd","max","min","toSegments","number","_attributes$timescale3","_attributes$startNumb","startNumber","timeline","time","parseByDuration","type","_attributes$timescale4","_segmentRange$type","segments","index","sectionDuration","segmentsFromBase","_attributes$initializ","initialization","_attributes$indexRang","presentationTime","_attributes$number","Error","initSegment","sourceURL","segmentTimeInfo","addSidxSegmentsToPlaylist$1","playlist","sidx","sidxByteRange","sidxEnd","mediaReferences","references","filter","r","referenceType","endList","mediaSequence","startIndex","firstOffset","reference","size","referencedSize","subsegmentDuration","endIndex","SUPPORTED_MEDIA_TYPES","TIME_FUDGE","getUniqueTimelineStarts","timelineStarts","_ref2","sort","b","findPlaylistWithName","playlists","name","NAME","getMediaGroupPlaylists","manifest","mediaGroupPlaylists","properties","group","label","updateMediaSequenceForPlaylist","_ref3","updateSequenceNumbers","_ref4","oldPlaylists","newPlaylists","discontinuitySequence","findIndex","_ref5","oldPlaylist","firstNewSegment","oldMatchingSegmentIndex","oldSegment","abs","discontinuity","discontinuityStarts","unshift","oldMatchingSegment","positionManifestOnTimeline","_ref6","oldManifest","newManifest","generateSidxKey","mergeDiscontiguousPlaylists","playlistsByBaseUrl","cur","allPlaylists","playlistGroup","mergedPlaylists","id","lang","_acc$name$segments","apply","_toConsumableArray","contentProtection","addSidxSegmentsToPlaylist","sidxMapping","sidxKey","sidxMatch","addSidxSegmentsToPlaylists","undefined","formatAudioPlaylist","_ref7","isAudioOnly","_defineProperty","BANDWIDTH","bandwidth","CODECS","codecs","targetDuration","serviceLocation","AUDIO","SUBTITLES","formatVttPlaylist","_ref8","m3u8Attributes","vttPlaylist","organizeAudioPlaylists","mainPlaylist","formattedPlaylists","role","value","language","roleLabel","autoselect","default","formatted","firstLabel","organizeVttPlaylists","organizeCaptionServices","captionServices","svcObj","svc","service","channel","instreamId","hasOwnProperty","aspectRatio","easyReader","formatVideoPlaylist","_ref9","RESOLUTION","width","height","frameRate","videoOnly","_ref10","mimeType","contentType","audioOnly","_ref11","vttOnly","_ref12","addMediaSequenceValues","_ref13","flattenMediaGroupPlaylists","mediaGroupObject","labelContents","toM3u8","_ref14","_mediaGroups","dashPlaylists","locations","contentSteering","_ref14$sidxMapping","previousManifest","eventStream","_dashPlaylists$0$attr","suggestedPresentationDelay","videoPlaylists","audioPlaylists","vttPlaylists","captions","Boolean","allowCache","mediaGroups","VIDEO","organizedAudioGroup","organizedVttGroup","playlistTimelineStarts","_ref15","audio","subs","cc","getLiveRValue","_attributes$timescale5","_attributes$periodSta2","_attributes$minimumUp2","parseByTimeline","segmentTimeline","_attributes$minimumUp3","_attributes$media","media","_attributes$timescale6","_attributes$startNumb2","sIndex","S","d","repeat","segmentTime","t","count","nextS","indexOf","identifierPattern","identifierReplacement","match","identifier","format","join","constructTemplateUrl","url","replace","parseTemplateInfo","segmentsFromTemplate","templateValues","RepresentationID","Bandwidth","_attributes$initializ2","mapSegment","Time","presentationTimeOffset","SegmentURLToSegmentObject","segmentUrl","_attributes$initializ3","mediaRange","segmentsFromList","_attributes$segmentUr","segmentUrls","segmentUrlMap","segmentUrlObject","generateSegments","_ref16","segmentInfo","segmentAttributes","segmentsFn","template","base","segmentsInfo","_segmentAttributes","_segmentAttributes$ti","toPlaylists","representations","findChildren","element","childNodes","_ref17","tagName","getContent","textContent","trim","parseDivisionValue","parseFloat","prev","current","parseDuration","str","SECONDS_IN_YEAR","SECONDS_IN_MONTH","SECONDS_IN_DAY","SECONDS_IN_HOUR","SECONDS_IN_MIN","durationRegex","exec","_match$slice","slice","_match$slice2","_slicedToArray","year","month","day","hour","minute","second","parseDate","dateRegex","test","Date","parse","parsers","mediaPresentationDuration","parsedValue","DEFAULT","parseAttributes","parseFn","keySystemsMap","buildBaseUrls","baseUrlElements","baseUrlElement","initialBaseUrl","resolvedBaseUrl","finalBaseUrl","getSegmentInformation","adaptationSet","segmentTemplate","segmentList","s","tag","segmentBase","segmentTimelineParentNode","segmentInitializationParentNode","segmentInitialization","inheritBaseUrls","adaptationSetAttributes","adaptationSetBaseUrls","adaptationSetSegmentInfo","representation","repBaseUrlElements","repBaseUrls","representationSegmentInfo","generateKeySystemInformation","contentProtectionNodes","node","schemeIdUri","toLowerCase","keySystem","psshNode","pssh","parseCaptionServiceMetadata","_value$split","_value$split2","flags","_value$split3","_value$split4","_value$split4$","opts","opt","_opt$split","_opt$split2","val","toEventStream","period","eventStreamAttributes","event","eventAttributes","messageData","contentEncoding","toRepresentations","periodAttributes","periodBaseUrls","periodSegmentInfo","roleAttributes","attrs","accessibility","labelVal","nodeValue","toAdaptationSets","mpdAttributes","mpdBaseUrls","adaptationSets","generateContentSteeringInformation","contentSteeringNodes","eventHandler","message","infoFromContentSteeringTag","serverURL","queryBeforeStart","getPeriodStart","_ref18","priorPeriodAttributes","mpdType","inheritAttributes","mpd","options","_options$manifestUri","manifestUri","_options$NOW","_options$clientOffset","_options$eventHandler","periodNodes","periods","priorPeriod","contentSteeringInfo","representationInfo","stringToMpdXml","manifestString","parser","xml","parseFromString","documentElement","getElementsByTagName","parseUTCTimingScheme","UTCTimingNode","method","VERSION","parsedManifestInfo","parseUTCTiming"],"sources":["C:/Users/hp/Downloads/video_player_uploader-master/backend/frontend-app/node_modules/mpd-parser/dist/mpd-parser.es.js"],"sourcesContent":["/*! @name mpd-parser @version 1.3.0 @license Apache-2.0 */\nimport resolveUrl from '@videojs/vhs-utils/es/resolve-url';\nimport window from 'global/window';\nimport { forEachMediaGroup } from '@videojs/vhs-utils/es/media-groups';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/es/decode-b64-to-uint8-array';\nimport { DOMParser } from '@xmldom/xmldom';\n\nvar version = \"1.3.0\";\n\nconst isObject = obj => {\n  return !!obj && typeof obj === 'object';\n};\n\nconst merge = (...objects) => {\n  return objects.reduce((result, source) => {\n    if (typeof source !== 'object') {\n      return result;\n    }\n\n    Object.keys(source).forEach(key => {\n      if (Array.isArray(result[key]) && Array.isArray(source[key])) {\n        result[key] = result[key].concat(source[key]);\n      } else if (isObject(result[key]) && isObject(source[key])) {\n        result[key] = merge(result[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n    return result;\n  }, {});\n};\nconst values = o => Object.keys(o).map(k => o[k]);\n\nconst range = (start, end) => {\n  const result = [];\n\n  for (let i = start; i < end; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\nconst flatten = lists => lists.reduce((x, y) => x.concat(y), []);\nconst from = list => {\n  if (!list.length) {\n    return [];\n  }\n\n  const result = [];\n\n  for (let i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n\n  return result;\n};\nconst findIndexes = (l, key) => l.reduce((a, e, i) => {\n  if (e[key]) {\n    a.push(i);\n  }\n\n  return a;\n}, []);\n/**\n * Returns a union of the included lists provided each element can be identified by a key.\n *\n * @param {Array} list - list of lists to get the union of\n * @param {Function} keyFunction - the function to use as a key for each element\n *\n * @return {Array} the union of the arrays\n */\n\nconst union = (lists, keyFunction) => {\n  return values(lists.reduce((acc, list) => {\n    list.forEach(el => {\n      acc[keyFunction(el)] = el;\n    });\n    return acc;\n  }, {}));\n};\n\nvar errors = {\n  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\n  INVALID_NUMBER_OF_CONTENT_STEERING: 'INVALID_NUMBER_OF_CONTENT_STEERING',\n  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\n  DASH_INVALID_XML: 'DASH_INVALID_XML',\n  NO_BASE_URL: 'NO_BASE_URL',\n  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\n  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\n  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\n};\n\n/**\n * @typedef {Object} SingleUri\n * @property {string} uri - relative location of segment\n * @property {string} resolvedUri - resolved location of segment\n * @property {Object} byterange - Object containing information on how to make byte range\n *   requests following byte-range-spec per RFC2616.\n * @property {String} byterange.length - length of range request\n * @property {String} byterange.offset - byte offset of range request\n *\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\n */\n\n/**\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\n * that conforms to how m3u8-parser is structured\n *\n * @see https://github.com/videojs/m3u8-parser\n *\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\n * @param {string} source - source url for segment\n * @param {string} range - optional range used for range calls,\n *   follows  RFC 2616, Clause 14.35.1\n * @return {SingleUri} full segment information transformed into a format similar\n *   to m3u8-parser\n */\n\nconst urlTypeToSegment = ({\n  baseUrl = '',\n  source = '',\n  range = '',\n  indexRange = ''\n}) => {\n  const segment = {\n    uri: source,\n    resolvedUri: resolveUrl(baseUrl || '', source)\n  };\n\n  if (range || indexRange) {\n    const rangeStr = range ? range : indexRange;\n    const ranges = rangeStr.split('-'); // default to parsing this as a BigInt if possible\n\n    let startRange = window.BigInt ? window.BigInt(ranges[0]) : parseInt(ranges[0], 10);\n    let endRange = window.BigInt ? window.BigInt(ranges[1]) : parseInt(ranges[1], 10); // convert back to a number if less than MAX_SAFE_INTEGER\n\n    if (startRange < Number.MAX_SAFE_INTEGER && typeof startRange === 'bigint') {\n      startRange = Number(startRange);\n    }\n\n    if (endRange < Number.MAX_SAFE_INTEGER && typeof endRange === 'bigint') {\n      endRange = Number(endRange);\n    }\n\n    let length;\n\n    if (typeof endRange === 'bigint' || typeof startRange === 'bigint') {\n      length = window.BigInt(endRange) - window.BigInt(startRange) + window.BigInt(1);\n    } else {\n      length = endRange - startRange + 1;\n    }\n\n    if (typeof length === 'bigint' && length < Number.MAX_SAFE_INTEGER) {\n      length = Number(length);\n    } // byterange should be inclusive according to\n    // RFC 2616, Clause 14.35.1\n\n\n    segment.byterange = {\n      length,\n      offset: startRange\n    };\n  }\n\n  return segment;\n};\nconst byteRangeToString = byterange => {\n  // `endRange` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  let endRange;\n\n  if (typeof byterange.offset === 'bigint' || typeof byterange.length === 'bigint') {\n    endRange = window.BigInt(byterange.offset) + window.BigInt(byterange.length) - window.BigInt(1);\n  } else {\n    endRange = byterange.offset + byterange.length - 1;\n  }\n\n  return `${byterange.offset}-${endRange}`;\n};\n\n/**\n * parse the end number attribue that can be a string\n * number, or undefined.\n *\n * @param {string|number|undefined} endNumber\n *        The end number attribute.\n *\n * @return {number|null}\n *          The result of parsing the end number.\n */\n\nconst parseEndNumber = endNumber => {\n  if (endNumber && typeof endNumber !== 'number') {\n    endNumber = parseInt(endNumber, 10);\n  }\n\n  if (isNaN(endNumber)) {\n    return null;\n  }\n\n  return endNumber;\n};\n/**\n * Functions for calculating the range of available segments in static and dynamic\n * manifests.\n */\n\n\nconst segmentRange = {\n  /**\n   * Returns the entire range of available segments for a static MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  static(attributes) {\n    const {\n      duration,\n      timescale = 1,\n      sourceDuration,\n      periodDuration\n    } = attributes;\n    const endNumber = parseEndNumber(attributes.endNumber);\n    const segmentDuration = duration / timescale;\n\n    if (typeof endNumber === 'number') {\n      return {\n        start: 0,\n        end: endNumber\n      };\n    }\n\n    if (typeof periodDuration === 'number') {\n      return {\n        start: 0,\n        end: periodDuration / segmentDuration\n      };\n    }\n\n    return {\n      start: 0,\n      end: sourceDuration / segmentDuration\n    };\n  },\n\n  /**\n   * Returns the current live window range of available segments for a dynamic MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  dynamic(attributes) {\n    const {\n      NOW,\n      clientOffset,\n      availabilityStartTime,\n      timescale = 1,\n      duration,\n      periodStart = 0,\n      minimumUpdatePeriod = 0,\n      timeShiftBufferDepth = Infinity\n    } = attributes;\n    const endNumber = parseEndNumber(attributes.endNumber); // clientOffset is passed in at the top level of mpd-parser and is an offset calculated\n    // after retrieving UTC server time.\n\n    const now = (NOW + clientOffset) / 1000; // WC stands for Wall Clock.\n    // Convert the period start time to EPOCH.\n\n    const periodStartWC = availabilityStartTime + periodStart; // Period end in EPOCH is manifest's retrieval time + time until next update.\n\n    const periodEndWC = now + minimumUpdatePeriod;\n    const periodDuration = periodEndWC - periodStartWC;\n    const segmentCount = Math.ceil(periodDuration * timescale / duration);\n    const availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\n    const availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\n    return {\n      start: Math.max(0, availableStart),\n      end: typeof endNumber === 'number' ? endNumber : Math.min(segmentCount, availableEnd)\n    };\n  }\n\n};\n/**\n * Maps a range of numbers to objects with information needed to build the corresponding\n * segment list\n *\n * @name toSegmentsCallback\n * @function\n * @param {number} number\n *        Number of the segment\n * @param {number} index\n *        Index of the number in the range list\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\n *         Object with segment timing and duration info\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\n * information needed to build the segment list.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {toSegmentsCallback}\n *         Callback map function\n */\n\nconst toSegments = attributes => number => {\n  const {\n    duration,\n    timescale = 1,\n    periodStart,\n    startNumber = 1\n  } = attributes;\n  return {\n    number: startNumber + number,\n    duration: duration / timescale,\n    timeline: periodStart,\n    time: number * duration\n  };\n};\n/**\n * Returns a list of objects containing segment timing and duration info used for\n * building the list of segments. This uses the @duration attribute specified\n * in the MPD manifest to derive the range of segments.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nconst parseByDuration = attributes => {\n  const {\n    type,\n    duration,\n    timescale = 1,\n    periodDuration,\n    sourceDuration\n  } = attributes;\n  const {\n    start,\n    end\n  } = segmentRange[type](attributes);\n  const segments = range(start, end).map(toSegments(attributes));\n\n  if (type === 'static') {\n    const index = segments.length - 1; // section is either a period or the full source\n\n    const sectionDuration = typeof periodDuration === 'number' ? periodDuration : sourceDuration; // final segment may be less than full segment duration\n\n    segments[index].duration = sectionDuration - duration / timescale * index;\n  }\n\n  return segments;\n};\n\n/**\n * Translates SegmentBase into a set of segments.\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @return {Object.<Array>} list of segments\n */\n\nconst segmentsFromBase = attributes => {\n  const {\n    baseUrl,\n    initialization = {},\n    sourceDuration,\n    indexRange = '',\n    periodStart,\n    presentationTime,\n    number = 0,\n    duration\n  } = attributes; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\n\n  if (!baseUrl) {\n    throw new Error(errors.NO_BASE_URL);\n  }\n\n  const initSegment = urlTypeToSegment({\n    baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  const segment = urlTypeToSegment({\n    baseUrl,\n    source: baseUrl,\n    indexRange\n  });\n  segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source\n  // (since SegmentBase is only for one total segment)\n\n  if (duration) {\n    const segmentTimeInfo = parseByDuration(attributes);\n\n    if (segmentTimeInfo.length) {\n      segment.duration = segmentTimeInfo[0].duration;\n      segment.timeline = segmentTimeInfo[0].timeline;\n    }\n  } else if (sourceDuration) {\n    segment.duration = sourceDuration;\n    segment.timeline = periodStart;\n  } // If presentation time is provided, these segments are being generated by SIDX\n  // references, and should use the time provided. For the general case of SegmentBase,\n  // there should only be one segment in the period, so its presentation time is the same\n  // as its period start.\n\n\n  segment.presentationTime = presentationTime || periodStart;\n  segment.number = number;\n  return [segment];\n};\n/**\n * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist\n * according to the sidx information given.\n *\n * playlist.sidx has metadadata about the sidx where-as the sidx param\n * is the parsed sidx box itself.\n *\n * @param {Object} playlist the playlist to update the sidx information for\n * @param {Object} sidx the parsed sidx box\n * @return {Object} the playlist object with the updated sidx information\n */\n\nconst addSidxSegmentsToPlaylist$1 = (playlist, sidx, baseUrl) => {\n  // Retain init segment information\n  const initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial main manifest parsing\n\n  const sourceDuration = playlist.sidx.duration; // Retain source timeline\n\n  const timeline = playlist.timeline || 0;\n  const sidxByteRange = playlist.sidx.byterange;\n  const sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx\n\n  const timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes\n\n  const mediaReferences = sidx.references.filter(r => r.referenceType !== 1);\n  const segments = [];\n  const type = playlist.endList ? 'static' : 'dynamic';\n  const periodStart = playlist.sidx.timeline;\n  let presentationTime = periodStart;\n  let number = playlist.mediaSequence || 0; // firstOffset is the offset from the end of the sidx box\n\n  let startIndex; // eslint-disable-next-line\n\n  if (typeof sidx.firstOffset === 'bigint') {\n    startIndex = window.BigInt(sidxEnd) + sidx.firstOffset;\n  } else {\n    startIndex = sidxEnd + sidx.firstOffset;\n  }\n\n  for (let i = 0; i < mediaReferences.length; i++) {\n    const reference = sidx.references[i]; // size of the referenced (sub)segment\n\n    const size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale\n    // this will be converted to seconds when generating segments\n\n    const duration = reference.subsegmentDuration; // should be an inclusive range\n\n    let endIndex; // eslint-disable-next-line\n\n    if (typeof startIndex === 'bigint') {\n      endIndex = startIndex + window.BigInt(size) - window.BigInt(1);\n    } else {\n      endIndex = startIndex + size - 1;\n    }\n\n    const indexRange = `${startIndex}-${endIndex}`;\n    const attributes = {\n      baseUrl,\n      timescale,\n      timeline,\n      periodStart,\n      presentationTime,\n      number,\n      duration,\n      sourceDuration,\n      indexRange,\n      type\n    };\n    const segment = segmentsFromBase(attributes)[0];\n\n    if (initSegment) {\n      segment.map = initSegment;\n    }\n\n    segments.push(segment);\n\n    if (typeof startIndex === 'bigint') {\n      startIndex += window.BigInt(size);\n    } else {\n      startIndex += size;\n    }\n\n    presentationTime += duration / timescale;\n    number++;\n  }\n\n  playlist.segments = segments;\n  return playlist;\n};\n\nconst SUPPORTED_MEDIA_TYPES = ['AUDIO', 'SUBTITLES']; // allow one 60fps frame as leniency (arbitrarily chosen)\n\nconst TIME_FUDGE = 1 / 60;\n/**\n * Given a list of timelineStarts, combines, dedupes, and sorts them.\n *\n * @param {TimelineStart[]} timelineStarts - list of timeline starts\n *\n * @return {TimelineStart[]} the combined and deduped timeline starts\n */\n\nconst getUniqueTimelineStarts = timelineStarts => {\n  return union(timelineStarts, ({\n    timeline\n  }) => timeline).sort((a, b) => a.timeline > b.timeline ? 1 : -1);\n};\n/**\n * Finds the playlist with the matching NAME attribute.\n *\n * @param {Array} playlists - playlists to search through\n * @param {string} name - the NAME attribute to search for\n *\n * @return {Object|null} the matching playlist object, or null\n */\n\nconst findPlaylistWithName = (playlists, name) => {\n  for (let i = 0; i < playlists.length; i++) {\n    if (playlists[i].attributes.NAME === name) {\n      return playlists[i];\n    }\n  }\n\n  return null;\n};\n/**\n * Gets a flattened array of media group playlists.\n *\n * @param {Object} manifest - the main manifest object\n *\n * @return {Array} the media group playlists\n */\n\nconst getMediaGroupPlaylists = manifest => {\n  let mediaGroupPlaylists = [];\n  forEachMediaGroup(manifest, SUPPORTED_MEDIA_TYPES, (properties, type, group, label) => {\n    mediaGroupPlaylists = mediaGroupPlaylists.concat(properties.playlists || []);\n  });\n  return mediaGroupPlaylists;\n};\n/**\n * Updates the playlist's media sequence numbers.\n *\n * @param {Object} config - options object\n * @param {Object} config.playlist - the playlist to update\n * @param {number} config.mediaSequence - the mediaSequence number to start with\n */\n\nconst updateMediaSequenceForPlaylist = ({\n  playlist,\n  mediaSequence\n}) => {\n  playlist.mediaSequence = mediaSequence;\n  playlist.segments.forEach((segment, index) => {\n    segment.number = playlist.mediaSequence + index;\n  });\n};\n/**\n * Updates the media and discontinuity sequence numbers of newPlaylists given oldPlaylists\n * and a complete list of timeline starts.\n *\n * If no matching playlist is found, only the discontinuity sequence number of the playlist\n * will be updated.\n *\n * Since early available timelines are not supported, at least one segment must be present.\n *\n * @param {Object} config - options object\n * @param {Object[]} oldPlaylists - the old playlists to use as a reference\n * @param {Object[]} newPlaylists - the new playlists to update\n * @param {Object} timelineStarts - all timelineStarts seen in the stream to this point\n */\n\nconst updateSequenceNumbers = ({\n  oldPlaylists,\n  newPlaylists,\n  timelineStarts\n}) => {\n  newPlaylists.forEach(playlist => {\n    playlist.discontinuitySequence = timelineStarts.findIndex(function ({\n      timeline\n    }) {\n      return timeline === playlist.timeline;\n    }); // Playlists NAMEs come from DASH Representation IDs, which are mandatory\n    // (see ISO_23009-1-2012 5.3.5.2).\n    //\n    // If the same Representation existed in a prior Period, it will retain the same NAME.\n\n    const oldPlaylist = findPlaylistWithName(oldPlaylists, playlist.attributes.NAME);\n\n    if (!oldPlaylist) {\n      // Since this is a new playlist, the media sequence values can start from 0 without\n      // consequence.\n      return;\n    } // TODO better support for live SIDX\n    //\n    // As of this writing, mpd-parser does not support multiperiod SIDX (in live or VOD).\n    // This is evident by a playlist only having a single SIDX reference. In a multiperiod\n    // playlist there would need to be multiple SIDX references. In addition, live SIDX is\n    // not supported when the SIDX properties change on refreshes.\n    //\n    // In the future, if support needs to be added, the merging logic here can be called\n    // after SIDX references are resolved. For now, exit early to prevent exceptions being\n    // thrown due to undefined references.\n\n\n    if (playlist.sidx) {\n      return;\n    } // Since we don't yet support early available timelines, we don't need to support\n    // playlists with no segments.\n\n\n    const firstNewSegment = playlist.segments[0];\n    const oldMatchingSegmentIndex = oldPlaylist.segments.findIndex(function (oldSegment) {\n      return Math.abs(oldSegment.presentationTime - firstNewSegment.presentationTime) < TIME_FUDGE;\n    }); // No matching segment from the old playlist means the entire playlist was refreshed.\n    // In this case the media sequence should account for this update, and the new segments\n    // should be marked as discontinuous from the prior content, since the last prior\n    // timeline was removed.\n\n    if (oldMatchingSegmentIndex === -1) {\n      updateMediaSequenceForPlaylist({\n        playlist,\n        mediaSequence: oldPlaylist.mediaSequence + oldPlaylist.segments.length\n      });\n      playlist.segments[0].discontinuity = true;\n      playlist.discontinuityStarts.unshift(0); // No matching segment does not necessarily mean there's missing content.\n      //\n      // If the new playlist's timeline is the same as the last seen segment's timeline,\n      // then a discontinuity can be added to identify that there's potentially missing\n      // content. If there's no missing content, the discontinuity should still be rather\n      // harmless. It's possible that if segment durations are accurate enough, that the\n      // existence of a gap can be determined using the presentation times and durations,\n      // but if the segment timing info is off, it may introduce more problems than simply\n      // adding the discontinuity.\n      //\n      // If the new playlist's timeline is different from the last seen segment's timeline,\n      // then a discontinuity can be added to identify that this is the first seen segment\n      // of a new timeline. However, the logic at the start of this function that\n      // determined the disconinuity sequence by timeline index is now off by one (the\n      // discontinuity of the newest timeline hasn't yet fallen off the manifest...since\n      // we added it), so the disconinuity sequence must be decremented.\n      //\n      // A period may also have a duration of zero, so the case of no segments is handled\n      // here even though we don't yet support early available periods.\n\n      if (!oldPlaylist.segments.length && playlist.timeline > oldPlaylist.timeline || oldPlaylist.segments.length && playlist.timeline > oldPlaylist.segments[oldPlaylist.segments.length - 1].timeline) {\n        playlist.discontinuitySequence--;\n      }\n\n      return;\n    } // If the first segment matched with a prior segment on a discontinuity (it's matching\n    // on the first segment of a period), then the discontinuitySequence shouldn't be the\n    // timeline's matching one, but instead should be the one prior, and the first segment\n    // of the new manifest should be marked with a discontinuity.\n    //\n    // The reason for this special case is that discontinuity sequence shows how many\n    // discontinuities have fallen off of the playlist, and discontinuities are marked on\n    // the first segment of a new \"timeline.\" Because of this, while DASH will retain that\n    // Period while the \"timeline\" exists, HLS keeps track of it via the discontinuity\n    // sequence, and that first segment is an indicator, but can be removed before that\n    // timeline is gone.\n\n\n    const oldMatchingSegment = oldPlaylist.segments[oldMatchingSegmentIndex];\n\n    if (oldMatchingSegment.discontinuity && !firstNewSegment.discontinuity) {\n      firstNewSegment.discontinuity = true;\n      playlist.discontinuityStarts.unshift(0);\n      playlist.discontinuitySequence--;\n    }\n\n    updateMediaSequenceForPlaylist({\n      playlist,\n      mediaSequence: oldPlaylist.segments[oldMatchingSegmentIndex].number\n    });\n  });\n};\n/**\n * Given an old parsed manifest object and a new parsed manifest object, updates the\n * sequence and timing values within the new manifest to ensure that it lines up with the\n * old.\n *\n * @param {Array} oldManifest - the old main manifest object\n * @param {Array} newManifest - the new main manifest object\n *\n * @return {Object} the updated new manifest object\n */\n\nconst positionManifestOnTimeline = ({\n  oldManifest,\n  newManifest\n}) => {\n  // Starting from v4.1.2 of the IOP, section 4.4.3.3 states:\n  //\n  // \"MPD@availabilityStartTime and Period@start shall not be changed over MPD updates.\"\n  //\n  // This was added from https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/160\n  //\n  // Because of this change, and the difficulty of supporting periods with changing start\n  // times, periods with changing start times are not supported. This makes the logic much\n  // simpler, since periods with the same start time can be considerred the same period\n  // across refreshes.\n  //\n  // To give an example as to the difficulty of handling periods where the start time may\n  // change, if a single period manifest is refreshed with another manifest with a single\n  // period, and both the start and end times are increased, then the only way to determine\n  // if it's a new period or an old one that has changed is to look through the segments of\n  // each playlist and determine the presentation time bounds to find a match. In addition,\n  // if the period start changed to exceed the old period end, then there would be no\n  // match, and it would not be possible to determine whether the refreshed period is a new\n  // one or the old one.\n  const oldPlaylists = oldManifest.playlists.concat(getMediaGroupPlaylists(oldManifest));\n  const newPlaylists = newManifest.playlists.concat(getMediaGroupPlaylists(newManifest)); // Save all seen timelineStarts to the new manifest. Although this potentially means that\n  // there's a \"memory leak\" in that it will never stop growing, in reality, only a couple\n  // of properties are saved for each seen Period. Even long running live streams won't\n  // generate too many Periods, unless the stream is watched for decades. In the future,\n  // this can be optimized by mapping to discontinuity sequence numbers for each timeline,\n  // but it may not become an issue, and the additional info can be useful for debugging.\n\n  newManifest.timelineStarts = getUniqueTimelineStarts([oldManifest.timelineStarts, newManifest.timelineStarts]);\n  updateSequenceNumbers({\n    oldPlaylists,\n    newPlaylists,\n    timelineStarts: newManifest.timelineStarts\n  });\n  return newManifest;\n};\n\nconst generateSidxKey = sidx => sidx && sidx.uri + '-' + byteRangeToString(sidx.byterange);\n\nconst mergeDiscontiguousPlaylists = playlists => {\n  // Break out playlists into groups based on their baseUrl\n  const playlistsByBaseUrl = playlists.reduce(function (acc, cur) {\n    if (!acc[cur.attributes.baseUrl]) {\n      acc[cur.attributes.baseUrl] = [];\n    }\n\n    acc[cur.attributes.baseUrl].push(cur);\n    return acc;\n  }, {});\n  let allPlaylists = [];\n  Object.values(playlistsByBaseUrl).forEach(playlistGroup => {\n    const mergedPlaylists = values(playlistGroup.reduce((acc, playlist) => {\n      // assuming playlist IDs are the same across periods\n      // TODO: handle multiperiod where representation sets are not the same\n      // across periods\n      const name = playlist.attributes.id + (playlist.attributes.lang || '');\n\n      if (!acc[name]) {\n        // First Period\n        acc[name] = playlist;\n        acc[name].attributes.timelineStarts = [];\n      } else {\n        // Subsequent Periods\n        if (playlist.segments) {\n          // first segment of subsequent periods signal a discontinuity\n          if (playlist.segments[0]) {\n            playlist.segments[0].discontinuity = true;\n          }\n\n          acc[name].segments.push(...playlist.segments);\n        } // bubble up contentProtection, this assumes all DRM content\n        // has the same contentProtection\n\n\n        if (playlist.attributes.contentProtection) {\n          acc[name].attributes.contentProtection = playlist.attributes.contentProtection;\n        }\n      }\n\n      acc[name].attributes.timelineStarts.push({\n        // Although they represent the same number, it's important to have both to make it\n        // compatible with HLS potentially having a similar attribute.\n        start: playlist.attributes.periodStart,\n        timeline: playlist.attributes.periodStart\n      });\n      return acc;\n    }, {}));\n    allPlaylists = allPlaylists.concat(mergedPlaylists);\n  });\n  return allPlaylists.map(playlist => {\n    playlist.discontinuityStarts = findIndexes(playlist.segments || [], 'discontinuity');\n    return playlist;\n  });\n};\n\nconst addSidxSegmentsToPlaylist = (playlist, sidxMapping) => {\n  const sidxKey = generateSidxKey(playlist.sidx);\n  const sidxMatch = sidxKey && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;\n\n  if (sidxMatch) {\n    addSidxSegmentsToPlaylist$1(playlist, sidxMatch, playlist.sidx.resolvedUri);\n  }\n\n  return playlist;\n};\nconst addSidxSegmentsToPlaylists = (playlists, sidxMapping = {}) => {\n  if (!Object.keys(sidxMapping).length) {\n    return playlists;\n  }\n\n  for (const i in playlists) {\n    playlists[i] = addSidxSegmentsToPlaylist(playlists[i], sidxMapping);\n  }\n\n  return playlists;\n};\nconst formatAudioPlaylist = ({\n  attributes,\n  segments,\n  sidx,\n  mediaSequence,\n  discontinuitySequence,\n  discontinuityStarts\n}, isAudioOnly) => {\n  const playlist = {\n    attributes: {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth,\n      CODECS: attributes.codecs,\n      ['PROGRAM-ID']: 1\n    },\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    discontinuitySequence,\n    discontinuityStarts,\n    timelineStarts: attributes.timelineStarts,\n    mediaSequence,\n    segments\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (attributes.serviceLocation) {\n    playlist.attributes.serviceLocation = attributes.serviceLocation;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  if (isAudioOnly) {\n    playlist.attributes.AUDIO = 'audio';\n    playlist.attributes.SUBTITLES = 'subs';\n  }\n\n  return playlist;\n};\nconst formatVttPlaylist = ({\n  attributes,\n  segments,\n  mediaSequence,\n  discontinuityStarts,\n  discontinuitySequence\n}) => {\n  if (typeof segments === 'undefined') {\n    // vtt tracks may use single file in BaseURL\n    segments = [{\n      uri: attributes.baseUrl,\n      timeline: attributes.periodStart,\n      resolvedUri: attributes.baseUrl || '',\n      duration: attributes.sourceDuration,\n      number: 0\n    }]; // targetDuration should be the same duration as the only segment\n\n    attributes.duration = attributes.sourceDuration;\n  }\n\n  const m3u8Attributes = {\n    NAME: attributes.id,\n    BANDWIDTH: attributes.bandwidth,\n    ['PROGRAM-ID']: 1\n  };\n\n  if (attributes.codecs) {\n    m3u8Attributes.CODECS = attributes.codecs;\n  }\n\n  const vttPlaylist = {\n    attributes: m3u8Attributes,\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    timelineStarts: attributes.timelineStarts,\n    discontinuityStarts,\n    discontinuitySequence,\n    mediaSequence,\n    segments\n  };\n\n  if (attributes.serviceLocation) {\n    vttPlaylist.attributes.serviceLocation = attributes.serviceLocation;\n  }\n\n  return vttPlaylist;\n};\nconst organizeAudioPlaylists = (playlists, sidxMapping = {}, isAudioOnly = false) => {\n  let mainPlaylist;\n  const formattedPlaylists = playlists.reduce((a, playlist) => {\n    const role = playlist.attributes.role && playlist.attributes.role.value || '';\n    const language = playlist.attributes.lang || '';\n    let label = playlist.attributes.label || 'main';\n\n    if (language && !playlist.attributes.label) {\n      const roleLabel = role ? ` (${role})` : '';\n      label = `${playlist.attributes.lang}${roleLabel}`;\n    }\n\n    if (!a[label]) {\n      a[label] = {\n        language,\n        autoselect: true,\n        default: role === 'main',\n        playlists: [],\n        uri: ''\n      };\n    }\n\n    const formatted = addSidxSegmentsToPlaylist(formatAudioPlaylist(playlist, isAudioOnly), sidxMapping);\n    a[label].playlists.push(formatted);\n\n    if (typeof mainPlaylist === 'undefined' && role === 'main') {\n      mainPlaylist = playlist;\n      mainPlaylist.default = true;\n    }\n\n    return a;\n  }, {}); // if no playlists have role \"main\", mark the first as main\n\n  if (!mainPlaylist) {\n    const firstLabel = Object.keys(formattedPlaylists)[0];\n    formattedPlaylists[firstLabel].default = true;\n  }\n\n  return formattedPlaylists;\n};\nconst organizeVttPlaylists = (playlists, sidxMapping = {}) => {\n  return playlists.reduce((a, playlist) => {\n    const label = playlist.attributes.label || playlist.attributes.lang || 'text';\n\n    if (!a[label]) {\n      a[label] = {\n        language: label,\n        default: false,\n        autoselect: false,\n        playlists: [],\n        uri: ''\n      };\n    }\n\n    a[label].playlists.push(addSidxSegmentsToPlaylist(formatVttPlaylist(playlist), sidxMapping));\n    return a;\n  }, {});\n};\n\nconst organizeCaptionServices = captionServices => captionServices.reduce((svcObj, svc) => {\n  if (!svc) {\n    return svcObj;\n  }\n\n  svc.forEach(service => {\n    const {\n      channel,\n      language\n    } = service;\n    svcObj[language] = {\n      autoselect: false,\n      default: false,\n      instreamId: channel,\n      language\n    };\n\n    if (service.hasOwnProperty('aspectRatio')) {\n      svcObj[language].aspectRatio = service.aspectRatio;\n    }\n\n    if (service.hasOwnProperty('easyReader')) {\n      svcObj[language].easyReader = service.easyReader;\n    }\n\n    if (service.hasOwnProperty('3D')) {\n      svcObj[language]['3D'] = service['3D'];\n    }\n  });\n  return svcObj;\n}, {});\n\nconst formatVideoPlaylist = ({\n  attributes,\n  segments,\n  sidx,\n  discontinuityStarts\n}) => {\n  const playlist = {\n    attributes: {\n      NAME: attributes.id,\n      AUDIO: 'audio',\n      SUBTITLES: 'subs',\n      RESOLUTION: {\n        width: attributes.width,\n        height: attributes.height\n      },\n      CODECS: attributes.codecs,\n      BANDWIDTH: attributes.bandwidth,\n      ['PROGRAM-ID']: 1\n    },\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    discontinuityStarts,\n    timelineStarts: attributes.timelineStarts,\n    segments\n  };\n\n  if (attributes.frameRate) {\n    playlist.attributes['FRAME-RATE'] = attributes.frameRate;\n  }\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (attributes.serviceLocation) {\n    playlist.attributes.serviceLocation = attributes.serviceLocation;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  return playlist;\n};\n\nconst videoOnly = ({\n  attributes\n}) => attributes.mimeType === 'video/mp4' || attributes.mimeType === 'video/webm' || attributes.contentType === 'video';\n\nconst audioOnly = ({\n  attributes\n}) => attributes.mimeType === 'audio/mp4' || attributes.mimeType === 'audio/webm' || attributes.contentType === 'audio';\n\nconst vttOnly = ({\n  attributes\n}) => attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\n/**\n * Contains start and timeline properties denoting a timeline start. For DASH, these will\n * be the same number.\n *\n * @typedef {Object} TimelineStart\n * @property {number} start - the start time of the timeline\n * @property {number} timeline - the timeline number\n */\n\n/**\n * Adds appropriate media and discontinuity sequence values to the segments and playlists.\n *\n * Throughout mpd-parser, the `number` attribute is used in relation to `startNumber`, a\n * DASH specific attribute used in constructing segment URI's from templates. However, from\n * an HLS perspective, the `number` attribute on a segment would be its `mediaSequence`\n * value, which should start at the original media sequence value (or 0) and increment by 1\n * for each segment thereafter. Since DASH's `startNumber` values are independent per\n * period, it doesn't make sense to use it for `number`. Instead, assume everything starts\n * from a 0 mediaSequence value and increment from there.\n *\n * Note that VHS currently doesn't use the `number` property, but it can be helpful for\n * debugging and making sense of the manifest.\n *\n * For live playlists, to account for values increasing in manifests when periods are\n * removed on refreshes, merging logic should be used to update the numbers to their\n * appropriate values (to ensure they're sequential and increasing).\n *\n * @param {Object[]} playlists - the playlists to update\n * @param {TimelineStart[]} timelineStarts - the timeline starts for the manifest\n */\n\n\nconst addMediaSequenceValues = (playlists, timelineStarts) => {\n  // increment all segments sequentially\n  playlists.forEach(playlist => {\n    playlist.mediaSequence = 0;\n    playlist.discontinuitySequence = timelineStarts.findIndex(function ({\n      timeline\n    }) {\n      return timeline === playlist.timeline;\n    });\n\n    if (!playlist.segments) {\n      return;\n    }\n\n    playlist.segments.forEach((segment, index) => {\n      segment.number = index;\n    });\n  });\n};\n/**\n * Given a media group object, flattens all playlists within the media group into a single\n * array.\n *\n * @param {Object} mediaGroupObject - the media group object\n *\n * @return {Object[]}\n *         The media group playlists\n */\n\nconst flattenMediaGroupPlaylists = mediaGroupObject => {\n  if (!mediaGroupObject) {\n    return [];\n  }\n\n  return Object.keys(mediaGroupObject).reduce((acc, label) => {\n    const labelContents = mediaGroupObject[label];\n    return acc.concat(labelContents.playlists);\n  }, []);\n};\nconst toM3u8 = ({\n  dashPlaylists,\n  locations,\n  contentSteering,\n  sidxMapping = {},\n  previousManifest,\n  eventStream\n}) => {\n  if (!dashPlaylists.length) {\n    return {};\n  } // grab all main manifest attributes\n\n\n  const {\n    sourceDuration: duration,\n    type,\n    suggestedPresentationDelay,\n    minimumUpdatePeriod\n  } = dashPlaylists[0].attributes;\n  const videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);\n  const audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));\n  const vttPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(vttOnly));\n  const captions = dashPlaylists.map(playlist => playlist.attributes.captionServices).filter(Boolean);\n  const manifest = {\n    allowCache: true,\n    discontinuityStarts: [],\n    segments: [],\n    endList: true,\n    mediaGroups: {\n      AUDIO: {},\n      VIDEO: {},\n      ['CLOSED-CAPTIONS']: {},\n      SUBTITLES: {}\n    },\n    uri: '',\n    duration,\n    playlists: addSidxSegmentsToPlaylists(videoPlaylists, sidxMapping)\n  };\n\n  if (minimumUpdatePeriod >= 0) {\n    manifest.minimumUpdatePeriod = minimumUpdatePeriod * 1000;\n  }\n\n  if (locations) {\n    manifest.locations = locations;\n  }\n\n  if (contentSteering) {\n    manifest.contentSteering = contentSteering;\n  }\n\n  if (type === 'dynamic') {\n    manifest.suggestedPresentationDelay = suggestedPresentationDelay;\n  }\n\n  if (eventStream && eventStream.length > 0) {\n    manifest.eventStream = eventStream;\n  }\n\n  const isAudioOnly = manifest.playlists.length === 0;\n  const organizedAudioGroup = audioPlaylists.length ? organizeAudioPlaylists(audioPlaylists, sidxMapping, isAudioOnly) : null;\n  const organizedVttGroup = vttPlaylists.length ? organizeVttPlaylists(vttPlaylists, sidxMapping) : null;\n  const formattedPlaylists = videoPlaylists.concat(flattenMediaGroupPlaylists(organizedAudioGroup), flattenMediaGroupPlaylists(organizedVttGroup));\n  const playlistTimelineStarts = formattedPlaylists.map(({\n    timelineStarts\n  }) => timelineStarts);\n  manifest.timelineStarts = getUniqueTimelineStarts(playlistTimelineStarts);\n  addMediaSequenceValues(formattedPlaylists, manifest.timelineStarts);\n\n  if (organizedAudioGroup) {\n    manifest.mediaGroups.AUDIO.audio = organizedAudioGroup;\n  }\n\n  if (organizedVttGroup) {\n    manifest.mediaGroups.SUBTITLES.subs = organizedVttGroup;\n  }\n\n  if (captions.length) {\n    manifest.mediaGroups['CLOSED-CAPTIONS'].cc = organizeCaptionServices(captions);\n  }\n\n  if (previousManifest) {\n    return positionManifestOnTimeline({\n      oldManifest: previousManifest,\n      newManifest: manifest\n    });\n  }\n\n  return manifest;\n};\n\n/**\n * Calculates the R (repetition) value for a live stream (for the final segment\n * in a manifest where the r value is negative 1)\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {number} time\n *        current time (typically the total time up until the final segment)\n * @param {number} duration\n *        duration property for the given <S />\n *\n * @return {number}\n *        R value to reach the end of the given period\n */\nconst getLiveRValue = (attributes, time, duration) => {\n  const {\n    NOW,\n    clientOffset,\n    availabilityStartTime,\n    timescale = 1,\n    periodStart = 0,\n    minimumUpdatePeriod = 0\n  } = attributes;\n  const now = (NOW + clientOffset) / 1000;\n  const periodStartWC = availabilityStartTime + periodStart;\n  const periodEndWC = now + minimumUpdatePeriod;\n  const periodDuration = periodEndWC - periodStartWC;\n  return Math.ceil((periodDuration * timescale - time) / duration);\n};\n/**\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\n * timing and duration\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\n\nconst parseByTimeline = (attributes, segmentTimeline) => {\n  const {\n    type,\n    minimumUpdatePeriod = 0,\n    media = '',\n    sourceDuration,\n    timescale = 1,\n    startNumber = 1,\n    periodStart: timeline\n  } = attributes;\n  const segments = [];\n  let time = -1;\n\n  for (let sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\n    const S = segmentTimeline[sIndex];\n    const duration = S.d;\n    const repeat = S.r || 0;\n    const segmentTime = S.t || 0;\n\n    if (time < 0) {\n      // first segment\n      time = segmentTime;\n    }\n\n    if (segmentTime && segmentTime > time) {\n      // discontinuity\n      // TODO: How to handle this type of discontinuity\n      // timeline++ here would treat it like HLS discontuity and content would\n      // get appended without gap\n      // E.G.\n      //  <S t=\"0\" d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S t=\"5\" d=\"1\" />\n      // would have $Time$ values of [0, 1, 2, 5]\n      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\n      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\n      // does the value of sourceDuration consider this when calculating arbitrary\n      // negative @r repeat value?\n      // E.G. Same elements as above with this added at the end\n      //  <S d=\"1\" r=\"-1\" />\n      //  with a sourceDuration of 10\n      // Would the 2 gaps be included in the time duration calculations resulting in\n      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\n      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\n      time = segmentTime;\n    }\n\n    let count;\n\n    if (repeat < 0) {\n      const nextS = sIndex + 1;\n\n      if (nextS === segmentTimeline.length) {\n        // last segment\n        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\n          count = getLiveRValue(attributes, time, duration);\n        } else {\n          // TODO: This may be incorrect depending on conclusion of TODO above\n          count = (sourceDuration * timescale - time) / duration;\n        }\n      } else {\n        count = (segmentTimeline[nextS].t - time) / duration;\n      }\n    } else {\n      count = repeat + 1;\n    }\n\n    const end = startNumber + segments.length + count;\n    let number = startNumber + segments.length;\n\n    while (number < end) {\n      segments.push({\n        number,\n        duration: duration / timescale,\n        time,\n        timeline\n      });\n      time += duration;\n      number++;\n    }\n  }\n\n  return segments;\n};\n\nconst identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\n/**\n * Replaces template identifiers with corresponding values. To be used as the callback\n * for String.prototype.replace\n *\n * @name replaceCallback\n * @function\n * @param {string} match\n *        Entire match of identifier\n * @param {string} identifier\n *        Name of matched identifier\n * @param {string} format\n *        Format tag string. Its presence indicates that padding is expected\n * @param {string} width\n *        Desired length of the replaced value. Values less than this width shall be left\n *        zero padded\n * @return {string}\n *         Replacement for the matched identifier\n */\n\n/**\n * Returns a function to be used as a callback for String.prototype.replace to replace\n * template identifiers\n *\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {replaceCallback}\n *         Callback to be used with String.prototype.replace to replace identifiers\n */\n\nconst identifierReplacement = values => (match, identifier, format, width) => {\n  if (match === '$$') {\n    // escape sequence\n    return '$';\n  }\n\n  if (typeof values[identifier] === 'undefined') {\n    return match;\n  }\n\n  const value = '' + values[identifier];\n\n  if (identifier === 'RepresentationID') {\n    // Format tag shall not be present with RepresentationID\n    return value;\n  }\n\n  if (!format) {\n    width = 1;\n  } else {\n    width = parseInt(width, 10);\n  }\n\n  if (value.length >= width) {\n    return value;\n  }\n\n  return `${new Array(width - value.length + 1).join('0')}${value}`;\n};\n/**\n * Constructs a segment url from a template string\n *\n * @param {string} url\n *        Template string to construct url from\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {string}\n *         Segment url with identifiers replaced\n */\n\nconst constructTemplateUrl = (url, values) => url.replace(identifierPattern, identifierReplacement(values));\n/**\n * Generates a list of objects containing timing and duration information about each\n * segment needed to generate segment uris and the complete segment object\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nconst parseTemplateInfo = (attributes, segmentTimeline) => {\n  if (!attributes.duration && !segmentTimeline) {\n    // if neither @duration or SegmentTimeline are present, then there shall be exactly\n    // one media segment\n    return [{\n      number: attributes.startNumber || 1,\n      duration: attributes.sourceDuration,\n      time: 0,\n      timeline: attributes.periodStart\n    }];\n  }\n\n  if (attributes.duration) {\n    return parseByDuration(attributes);\n  }\n\n  return parseByTimeline(attributes, segmentTimeline);\n};\n/**\n * Generates a list of segments using information provided by the SegmentTemplate element\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object[]}\n *         List of segment objects\n */\n\nconst segmentsFromTemplate = (attributes, segmentTimeline) => {\n  const templateValues = {\n    RepresentationID: attributes.id,\n    Bandwidth: attributes.bandwidth || 0\n  };\n  const {\n    initialization = {\n      sourceURL: '',\n      range: ''\n    }\n  } = attributes;\n  const mapSegment = urlTypeToSegment({\n    baseUrl: attributes.baseUrl,\n    source: constructTemplateUrl(initialization.sourceURL, templateValues),\n    range: initialization.range\n  });\n  const segments = parseTemplateInfo(attributes, segmentTimeline);\n  return segments.map(segment => {\n    templateValues.Number = segment.number;\n    templateValues.Time = segment.time;\n    const uri = constructTemplateUrl(attributes.media || '', templateValues); // See DASH spec section 5.3.9.2.2\n    // - if timescale isn't present on any level, default to 1.\n\n    const timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n    const presentationTimeOffset = attributes.presentationTimeOffset || 0;\n    const presentationTime = // Even if the @t attribute is not specified for the segment, segment.time is\n    // calculated in mpd-parser prior to this, so it's assumed to be available.\n    attributes.periodStart + (segment.time - presentationTimeOffset) / timescale;\n    const map = {\n      uri,\n      timeline: segment.timeline,\n      duration: segment.duration,\n      resolvedUri: resolveUrl(attributes.baseUrl || '', uri),\n      map: mapSegment,\n      number: segment.number,\n      presentationTime\n    };\n    return map;\n  });\n};\n\n/**\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\n * to an object that matches the output of a segment in videojs/mpd-parser\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object} segmentUrl\n *   <SegmentURL> node to translate into a segment object\n * @return {Object} translated segment object\n */\n\nconst SegmentURLToSegmentObject = (attributes, segmentUrl) => {\n  const {\n    baseUrl,\n    initialization = {}\n  } = attributes;\n  const initSegment = urlTypeToSegment({\n    baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  const segment = urlTypeToSegment({\n    baseUrl,\n    source: segmentUrl.media,\n    range: segmentUrl.mediaRange\n  });\n  segment.map = initSegment;\n  return segment;\n};\n/**\n * Generates a list of segments using information provided by the SegmentList element\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object.<Array>} list of segments\n */\n\n\nconst segmentsFromList = (attributes, segmentTimeline) => {\n  const {\n    duration,\n    segmentUrls = [],\n    periodStart\n  } = attributes; // Per spec (5.3.9.2.1) no way to determine segment duration OR\n  // if both SegmentTimeline and @duration are defined, it is outside of spec.\n\n  if (!duration && !segmentTimeline || duration && segmentTimeline) {\n    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\n  }\n\n  const segmentUrlMap = segmentUrls.map(segmentUrlObject => SegmentURLToSegmentObject(attributes, segmentUrlObject));\n  let segmentTimeInfo;\n\n  if (duration) {\n    segmentTimeInfo = parseByDuration(attributes);\n  }\n\n  if (segmentTimeline) {\n    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\n  }\n\n  const segments = segmentTimeInfo.map((segmentTime, index) => {\n    if (segmentUrlMap[index]) {\n      const segment = segmentUrlMap[index]; // See DASH spec section 5.3.9.2.2\n      // - if timescale isn't present on any level, default to 1.\n\n      const timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n      const presentationTimeOffset = attributes.presentationTimeOffset || 0;\n      segment.timeline = segmentTime.timeline;\n      segment.duration = segmentTime.duration;\n      segment.number = segmentTime.number;\n      segment.presentationTime = periodStart + (segmentTime.time - presentationTimeOffset) / timescale;\n      return segment;\n    } // Since we're mapping we should get rid of any blank segments (in case\n    // the given SegmentTimeline is handling for more elements than we have\n    // SegmentURLs for).\n\n  }).filter(segment => segment);\n  return segments;\n};\n\nconst generateSegments = ({\n  attributes,\n  segmentInfo\n}) => {\n  let segmentAttributes;\n  let segmentsFn;\n\n  if (segmentInfo.template) {\n    segmentsFn = segmentsFromTemplate;\n    segmentAttributes = merge(attributes, segmentInfo.template);\n  } else if (segmentInfo.base) {\n    segmentsFn = segmentsFromBase;\n    segmentAttributes = merge(attributes, segmentInfo.base);\n  } else if (segmentInfo.list) {\n    segmentsFn = segmentsFromList;\n    segmentAttributes = merge(attributes, segmentInfo.list);\n  }\n\n  const segmentsInfo = {\n    attributes\n  };\n\n  if (!segmentsFn) {\n    return segmentsInfo;\n  }\n\n  const segments = segmentsFn(segmentAttributes, segmentInfo.segmentTimeline); // The @duration attribute will be used to determin the playlist's targetDuration which\n  // must be in seconds. Since we've generated the segment list, we no longer need\n  // @duration to be in @timescale units, so we can convert it here.\n\n  if (segmentAttributes.duration) {\n    const {\n      duration,\n      timescale = 1\n    } = segmentAttributes;\n    segmentAttributes.duration = duration / timescale;\n  } else if (segments.length) {\n    // if there is no @duration attribute, use the largest segment duration as\n    // as target duration\n    segmentAttributes.duration = segments.reduce((max, segment) => {\n      return Math.max(max, Math.ceil(segment.duration));\n    }, 0);\n  } else {\n    segmentAttributes.duration = 0;\n  }\n\n  segmentsInfo.attributes = segmentAttributes;\n  segmentsInfo.segments = segments; // This is a sidx box without actual segment information\n\n  if (segmentInfo.base && segmentAttributes.indexRange) {\n    segmentsInfo.sidx = segments[0];\n    segmentsInfo.segments = [];\n  }\n\n  return segmentsInfo;\n};\nconst toPlaylists = representations => representations.map(generateSegments);\n\nconst findChildren = (element, name) => from(element.childNodes).filter(({\n  tagName\n}) => tagName === name);\nconst getContent = element => element.textContent.trim();\n\n/**\n * Converts the provided string that may contain a division operation to a number.\n *\n * @param {string} value - the provided string value\n *\n * @return {number} the parsed string value\n */\nconst parseDivisionValue = value => {\n  return parseFloat(value.split('/').reduce((prev, current) => prev / current));\n};\n\nconst parseDuration = str => {\n  const SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\n  const SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\n  const SECONDS_IN_DAY = 24 * 60 * 60;\n  const SECONDS_IN_HOUR = 60 * 60;\n  const SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S\n\n  const durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\n  const match = durationRegex.exec(str);\n\n  if (!match) {\n    return 0;\n  }\n\n  const [year, month, day, hour, minute, second] = match.slice(1);\n  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\n};\nconst parseDate = str => {\n  // Date format without timezone according to ISO 8601\n  // YYY-MM-DDThh:mm:ss.ssssss\n  const dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is\n  // expressed by ending with 'Z'\n\n  if (dateRegex.test(str)) {\n    str += 'Z';\n  }\n\n  return Date.parse(str);\n};\n\nconst parsers = {\n  /**\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\n   * as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  mediaPresentationDuration(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the Segment availability start time for all Segments referred to in this\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\n   * time. Format is a date string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The date as seconds from unix epoch\n   */\n  availabilityStartTime(value) {\n    return parseDate(value) / 1000;\n  },\n\n  /**\n   * Specifies the smallest period between potential changes to the MPD. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  minimumUpdatePeriod(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the suggested presentation delay. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  suggestedPresentationDelay(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * specifices the type of mpd. Can be either \"static\" or \"dynamic\"\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   *\n   * @return {string}\n   *         The type as a string\n   */\n  type(value) {\n    return value;\n  },\n\n  /**\n   * Specifies the duration of the smallest time shifting buffer for any Representation\n   * in the MPD. Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  timeShiftBufferDepth(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\n   * Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  start(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the width of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed width\n   */\n  width(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the height of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed height\n   */\n  height(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the bitrate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed bandwidth\n   */\n  bandwidth(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the frame rate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed frame rate\n   */\n  frameRate(value) {\n    return parseDivisionValue(value);\n  },\n\n  /**\n   * Specifies the number of the first Media Segment in this Representation in the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  startNumber(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the timescale in units per seconds\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed timescale\n   */\n  timescale(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the presentationTimeOffset.\n   *\n   * @param {string} value\n   *        value of the attribute as a string\n   *\n   * @return {number}\n   *         The parsed presentationTimeOffset\n   */\n  presentationTimeOffset(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the constant approximate Segment duration\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\n   *       specifies the duration of the Period. This attribute is currently not\n   *       supported by the rest of the parser, however we still check for it to prevent\n   *       errors.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  duration(value) {\n    const parsedValue = parseInt(value, 10);\n\n    if (isNaN(parsedValue)) {\n      return parseDuration(value);\n    }\n\n    return parsedValue;\n  },\n\n  /**\n   * Specifies the Segment duration, in units of the value of the @timescale.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  d(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\n   * starts relative to the beginning of the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed time\n   */\n  t(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the repeat count of the number of following contiguous Segments with the\n   * same duration expressed by the value of @d\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  r(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the presentationTime.\n   *\n   * @param {string} value\n   *        value of the attribute as a string\n   *\n   * @return {number}\n   *         The parsed presentationTime\n   */\n  presentationTime(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\n   * as a string\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {string}\n   *         Unparsed value\n   */\n  DEFAULT(value) {\n    return value;\n  }\n\n};\n/**\n * Gets all the attributes and values of the provided node, parses attributes with known\n * types, and returns an object with attribute names mapped to values.\n *\n * @param {Node} el\n *        The node to parse attributes from\n * @return {Object}\n *         Object with all attributes of el parsed\n */\n\nconst parseAttributes = el => {\n  if (!(el && el.attributes)) {\n    return {};\n  }\n\n  return from(el.attributes).reduce((a, e) => {\n    const parseFn = parsers[e.name] || parsers.DEFAULT;\n    a[e.name] = parseFn(e.value);\n    return a;\n  }, {});\n};\n\nconst keySystemsMap = {\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime',\n  // ISO_IEC 23009-1_2022 5.8.5.2.2 The mp4 Protection Scheme\n  'urn:mpeg:dash:mp4protection:2011': 'mp4protection'\n};\n/**\n * Builds a list of urls that is the product of the reference urls and BaseURL values\n *\n * @param {Object[]} references\n *        List of objects containing the reference URL as well as its attributes\n * @param {Node[]} baseUrlElements\n *        List of BaseURL nodes from the mpd\n * @return {Object[]}\n *         List of objects with resolved urls and attributes\n */\n\nconst buildBaseUrls = (references, baseUrlElements) => {\n  if (!baseUrlElements.length) {\n    return references;\n  }\n\n  return flatten(references.map(function (reference) {\n    return baseUrlElements.map(function (baseUrlElement) {\n      const initialBaseUrl = getContent(baseUrlElement);\n      const resolvedBaseUrl = resolveUrl(reference.baseUrl, initialBaseUrl);\n      const finalBaseUrl = merge(parseAttributes(baseUrlElement), {\n        baseUrl: resolvedBaseUrl\n      }); // If the URL is resolved, we want to get the serviceLocation from the reference\n      // assuming there is no serviceLocation on the initialBaseUrl\n\n      if (resolvedBaseUrl !== initialBaseUrl && !finalBaseUrl.serviceLocation && reference.serviceLocation) {\n        finalBaseUrl.serviceLocation = reference.serviceLocation;\n      }\n\n      return finalBaseUrl;\n    });\n  }));\n};\n/**\n * Contains all Segment information for its containing AdaptationSet\n *\n * @typedef {Object} SegmentInformation\n * @property {Object|undefined} template\n *           Contains the attributes for the SegmentTemplate node\n * @property {Object[]|undefined} segmentTimeline\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\n * @property {Object|undefined} list\n *           Contains the attributes for the SegmentList node\n * @property {Object|undefined} base\n *           Contains the attributes for the SegmentBase node\n */\n\n/**\n * Returns all available Segment information contained within the AdaptationSet node\n *\n * @param {Node} adaptationSet\n *        The AdaptationSet node to get Segment information from\n * @return {SegmentInformation}\n *         The Segment information contained within the provided AdaptationSet\n */\n\nconst getSegmentInformation = adaptationSet => {\n  const segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\n  const segmentList = findChildren(adaptationSet, 'SegmentList')[0];\n  const segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(s => merge({\n    tag: 'SegmentURL'\n  }, parseAttributes(s)));\n  const segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\n  const segmentTimelineParentNode = segmentList || segmentTemplate;\n  const segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\n  const segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\n  const segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0]; // SegmentTemplate is handled slightly differently, since it can have both\n  // @initialization and an <Initialization> node.  @initialization can be templated,\n  // while the node can have a url and range specified.  If the <SegmentTemplate> has\n  // both @initialization and an <Initialization> subelement we opt to override with\n  // the node, as this interaction is not defined in the spec.\n\n  const template = segmentTemplate && parseAttributes(segmentTemplate);\n\n  if (template && segmentInitialization) {\n    template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\n  } else if (template && template.initialization) {\n    // If it is @initialization we convert it to an object since this is the format that\n    // later functions will rely on for the initialization segment.  This is only valid\n    // for <SegmentTemplate>\n    template.initialization = {\n      sourceURL: template.initialization\n    };\n  }\n\n  const segmentInfo = {\n    template,\n    segmentTimeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(s => parseAttributes(s)),\n    list: segmentList && merge(parseAttributes(segmentList), {\n      segmentUrls,\n      initialization: parseAttributes(segmentInitialization)\n    }),\n    base: segmentBase && merge(parseAttributes(segmentBase), {\n      initialization: parseAttributes(segmentInitialization)\n    })\n  };\n  Object.keys(segmentInfo).forEach(key => {\n    if (!segmentInfo[key]) {\n      delete segmentInfo[key];\n    }\n  });\n  return segmentInfo;\n};\n/**\n * Contains Segment information and attributes needed to construct a Playlist object\n * from a Representation\n *\n * @typedef {Object} RepresentationInformation\n * @property {SegmentInformation} segmentInfo\n *           Segment information for this Representation\n * @property {Object} attributes\n *           Inherited attributes for this Representation\n */\n\n/**\n * Maps a Representation node to an object containing Segment information and attributes\n *\n * @name inheritBaseUrlsCallback\n * @function\n * @param {Node} representation\n *        Representation node from the mpd\n * @return {RepresentationInformation}\n *         Representation information needed to construct a Playlist object\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\n * Segment information and attributes using inherited BaseURL nodes.\n *\n * @param {Object} adaptationSetAttributes\n *        Contains attributes inherited by the AdaptationSet\n * @param {Object[]} adaptationSetBaseUrls\n *        List of objects containing resolved base URLs and attributes\n *        inherited by the AdaptationSet\n * @param {SegmentInformation} adaptationSetSegmentInfo\n *        Contains Segment information for the AdaptationSet\n * @return {inheritBaseUrlsCallback}\n *         Callback map function\n */\n\nconst inheritBaseUrls = (adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) => representation => {\n  const repBaseUrlElements = findChildren(representation, 'BaseURL');\n  const repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\n  const attributes = merge(adaptationSetAttributes, parseAttributes(representation));\n  const representationSegmentInfo = getSegmentInformation(representation);\n  return repBaseUrls.map(baseUrl => {\n    return {\n      segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\n      attributes: merge(attributes, baseUrl)\n    };\n  });\n};\n/**\n * Tranforms a series of content protection nodes to\n * an object containing pssh data by key system\n *\n * @param {Node[]} contentProtectionNodes\n *        Content protection nodes\n * @return {Object}\n *        Object containing pssh data by key system\n */\n\nconst generateKeySystemInformation = contentProtectionNodes => {\n  return contentProtectionNodes.reduce((acc, node) => {\n    const attributes = parseAttributes(node); // Although it could be argued that according to the UUID RFC spec the UUID string (a-f chars) should be generated\n    // as a lowercase string it also mentions it should be treated as case-insensitive on input. Since the key system\n    // UUIDs in the keySystemsMap are hardcoded as lowercase in the codebase there isn't any reason not to do\n    // .toLowerCase() on the input UUID string from the manifest (at least I could not think of one).\n\n    if (attributes.schemeIdUri) {\n      attributes.schemeIdUri = attributes.schemeIdUri.toLowerCase();\n    }\n\n    const keySystem = keySystemsMap[attributes.schemeIdUri];\n\n    if (keySystem) {\n      acc[keySystem] = {\n        attributes\n      };\n      const psshNode = findChildren(node, 'cenc:pssh')[0];\n\n      if (psshNode) {\n        const pssh = getContent(psshNode);\n        acc[keySystem].pssh = pssh && decodeB64ToUint8Array(pssh);\n      }\n    }\n\n    return acc;\n  }, {});\n}; // defined in ANSI_SCTE 214-1 2016\n\n\nconst parseCaptionServiceMetadata = service => {\n  // 608 captions\n  if (service.schemeIdUri === 'urn:scte:dash:cc:cea-608:2015') {\n    const values = typeof service.value !== 'string' ? [] : service.value.split(';');\n    return values.map(value => {\n      let channel;\n      let language; // default language to value\n\n      language = value;\n\n      if (/^CC\\d=/.test(value)) {\n        [channel, language] = value.split('=');\n      } else if (/^CC\\d$/.test(value)) {\n        channel = value;\n      }\n\n      return {\n        channel,\n        language\n      };\n    });\n  } else if (service.schemeIdUri === 'urn:scte:dash:cc:cea-708:2015') {\n    const values = typeof service.value !== 'string' ? [] : service.value.split(';');\n    return values.map(value => {\n      const flags = {\n        // service or channel number 1-63\n        'channel': undefined,\n        // language is a 3ALPHA per ISO 639.2/B\n        // field is required\n        'language': undefined,\n        // BIT 1/0 or ?\n        // default value is 1, meaning 16:9 aspect ratio, 0 is 4:3, ? is unknown\n        'aspectRatio': 1,\n        // BIT 1/0\n        // easy reader flag indicated the text is tailed to the needs of beginning readers\n        // default 0, or off\n        'easyReader': 0,\n        // BIT 1/0\n        // If 3d metadata is present (CEA-708.1) then 1\n        // default 0\n        '3D': 0\n      };\n\n      if (/=/.test(value)) {\n        const [channel, opts = ''] = value.split('=');\n        flags.channel = channel;\n        flags.language = value;\n        opts.split(',').forEach(opt => {\n          const [name, val] = opt.split(':');\n\n          if (name === 'lang') {\n            flags.language = val; // er for easyReadery\n          } else if (name === 'er') {\n            flags.easyReader = Number(val); // war for wide aspect ratio\n          } else if (name === 'war') {\n            flags.aspectRatio = Number(val);\n          } else if (name === '3D') {\n            flags['3D'] = Number(val);\n          }\n        });\n      } else {\n        flags.language = value;\n      }\n\n      if (flags.channel) {\n        flags.channel = 'SERVICE' + flags.channel;\n      }\n\n      return flags;\n    });\n  }\n};\n/**\n * A map callback that will parse all event stream data for a collection of periods\n * DASH ISO_IEC_23009 5.10.2.2\n * https://dashif-documents.azurewebsites.net/Events/master/event.html#mpd-event-timing\n *\n * @param {PeriodInformation} period object containing necessary period information\n * @return a collection of parsed eventstream event objects\n */\n\nconst toEventStream = period => {\n  // get and flatten all EventStreams tags and parse attributes and children\n  return flatten(findChildren(period.node, 'EventStream').map(eventStream => {\n    const eventStreamAttributes = parseAttributes(eventStream);\n    const schemeIdUri = eventStreamAttributes.schemeIdUri; // find all Events per EventStream tag and map to return objects\n\n    return findChildren(eventStream, 'Event').map(event => {\n      const eventAttributes = parseAttributes(event);\n      const presentationTime = eventAttributes.presentationTime || 0;\n      const timescale = eventStreamAttributes.timescale || 1;\n      const duration = eventAttributes.duration || 0;\n      const start = presentationTime / timescale + period.attributes.start;\n      return {\n        schemeIdUri,\n        value: eventStreamAttributes.value,\n        id: eventAttributes.id,\n        start,\n        end: start + duration / timescale,\n        messageData: getContent(event) || eventAttributes.messageData,\n        contentEncoding: eventStreamAttributes.contentEncoding,\n        presentationTimeOffset: eventStreamAttributes.presentationTimeOffset || 0\n      };\n    });\n  }));\n};\n/**\n * Maps an AdaptationSet node to a list of Representation information objects\n *\n * @name toRepresentationsCallback\n * @function\n * @param {Node} adaptationSet\n *        AdaptationSet node from the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\n * Representation information objects\n *\n * @param {Object} periodAttributes\n *        Contains attributes inherited by the Period\n * @param {Object[]} periodBaseUrls\n *        Contains list of objects with resolved base urls and attributes\n *        inherited by the Period\n * @param {string[]} periodSegmentInfo\n *        Contains Segment Information at the period level\n * @return {toRepresentationsCallback}\n *         Callback map function\n */\n\nconst toRepresentations = (periodAttributes, periodBaseUrls, periodSegmentInfo) => adaptationSet => {\n  const adaptationSetAttributes = parseAttributes(adaptationSet);\n  const adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\n  const role = findChildren(adaptationSet, 'Role')[0];\n  const roleAttributes = {\n    role: parseAttributes(role)\n  };\n  let attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\n  const accessibility = findChildren(adaptationSet, 'Accessibility')[0];\n  const captionServices = parseCaptionServiceMetadata(parseAttributes(accessibility));\n\n  if (captionServices) {\n    attrs = merge(attrs, {\n      captionServices\n    });\n  }\n\n  const label = findChildren(adaptationSet, 'Label')[0];\n\n  if (label && label.childNodes.length) {\n    const labelVal = label.childNodes[0].nodeValue.trim();\n    attrs = merge(attrs, {\n      label: labelVal\n    });\n  }\n\n  const contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\n\n  if (Object.keys(contentProtection).length) {\n    attrs = merge(attrs, {\n      contentProtection\n    });\n  }\n\n  const segmentInfo = getSegmentInformation(adaptationSet);\n  const representations = findChildren(adaptationSet, 'Representation');\n  const adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\n  return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\n};\n/**\n * Contains all period information for mapping nodes onto adaptation sets.\n *\n * @typedef {Object} PeriodInformation\n * @property {Node} period.node\n *           Period node from the mpd\n * @property {Object} period.attributes\n *           Parsed period attributes from node plus any added\n */\n\n/**\n * Maps a PeriodInformation object to a list of Representation information objects for all\n * AdaptationSet nodes contained within the Period.\n *\n * @name toAdaptationSetsCallback\n * @function\n * @param {PeriodInformation} period\n *        Period object containing necessary period information\n * @param {number} periodStart\n *        Start time of the Period within the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\n * Representation information objects\n *\n * @param {Object} mpdAttributes\n *        Contains attributes inherited by the mpd\n  * @param {Object[]} mpdBaseUrls\n *        Contains list of objects with resolved base urls and attributes\n *        inherited by the mpd\n * @return {toAdaptationSetsCallback}\n *         Callback map function\n */\n\nconst toAdaptationSets = (mpdAttributes, mpdBaseUrls) => (period, index) => {\n  const periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period.node, 'BaseURL'));\n  const periodAttributes = merge(mpdAttributes, {\n    periodStart: period.attributes.start\n  });\n\n  if (typeof period.attributes.duration === 'number') {\n    periodAttributes.periodDuration = period.attributes.duration;\n  }\n\n  const adaptationSets = findChildren(period.node, 'AdaptationSet');\n  const periodSegmentInfo = getSegmentInformation(period.node);\n  return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\n};\n/**\n * Tranforms an array of content steering nodes into an object\n * containing CDN content steering information from the MPD manifest.\n *\n * For more information on the DASH spec for Content Steering parsing, see:\n * https://dashif.org/docs/DASH-IF-CTS-00XX-Content-Steering-Community-Review.pdf\n *\n * @param {Node[]} contentSteeringNodes\n *        Content steering nodes\n * @param {Function} eventHandler\n *        The event handler passed into the parser options to handle warnings\n * @return {Object}\n *        Object containing content steering data\n */\n\nconst generateContentSteeringInformation = (contentSteeringNodes, eventHandler) => {\n  // If there are more than one ContentSteering tags, throw an error\n  if (contentSteeringNodes.length > 1) {\n    eventHandler({\n      type: 'warn',\n      message: 'The MPD manifest should contain no more than one ContentSteering tag'\n    });\n  } // Return a null value if there are no ContentSteering tags\n\n\n  if (!contentSteeringNodes.length) {\n    return null;\n  }\n\n  const infoFromContentSteeringTag = merge({\n    serverURL: getContent(contentSteeringNodes[0])\n  }, parseAttributes(contentSteeringNodes[0])); // Converts `queryBeforeStart` to a boolean, as well as setting the default value\n  // to `false` if it doesn't exist\n\n  infoFromContentSteeringTag.queryBeforeStart = infoFromContentSteeringTag.queryBeforeStart === 'true';\n  return infoFromContentSteeringTag;\n};\n/**\n * Gets Period@start property for a given period.\n *\n * @param {Object} options\n *        Options object\n * @param {Object} options.attributes\n *        Period attributes\n * @param {Object} [options.priorPeriodAttributes]\n *        Prior period attributes (if prior period is available)\n * @param {string} options.mpdType\n *        The MPD@type these periods came from\n * @return {number|null}\n *         The period start, or null if it's an early available period or error\n */\n\nconst getPeriodStart = ({\n  attributes,\n  priorPeriodAttributes,\n  mpdType\n}) => {\n  // Summary of period start time calculation from DASH spec section 5.3.2.1\n  //\n  // A period's start is the first period's start + time elapsed after playing all\n  // prior periods to this one. Periods continue one after the other in time (without\n  // gaps) until the end of the presentation.\n  //\n  // The value of Period@start should be:\n  // 1. if Period@start is present: value of Period@start\n  // 2. if previous period exists and it has @duration: previous Period@start +\n  //    previous Period@duration\n  // 3. if this is first period and MPD@type is 'static': 0\n  // 4. in all other cases, consider the period an \"early available period\" (note: not\n  //    currently supported)\n  // (1)\n  if (typeof attributes.start === 'number') {\n    return attributes.start;\n  } // (2)\n\n\n  if (priorPeriodAttributes && typeof priorPeriodAttributes.start === 'number' && typeof priorPeriodAttributes.duration === 'number') {\n    return priorPeriodAttributes.start + priorPeriodAttributes.duration;\n  } // (3)\n\n\n  if (!priorPeriodAttributes && mpdType === 'static') {\n    return 0;\n  } // (4)\n  // There is currently no logic for calculating the Period@start value if there is\n  // no Period@start or prior Period@start and Period@duration available. This is not made\n  // explicit by the DASH interop guidelines or the DASH spec, however, since there's\n  // nothing about any other resolution strategies, it's implied. Thus, this case should\n  // be considered an early available period, or error, and null should suffice for both\n  // of those cases.\n\n\n  return null;\n};\n/**\n * Traverses the mpd xml tree to generate a list of Representation information objects\n * that have inherited attributes from parent nodes\n *\n * @param {Node} mpd\n *        The root node of the mpd\n * @param {Object} options\n *        Available options for inheritAttributes\n * @param {string} options.manifestUri\n *        The uri source of the mpd\n * @param {number} options.NOW\n *        Current time per DASH IOP.  Default is current time in ms since epoch\n * @param {number} options.clientOffset\n *        Client time difference from NOW (in milliseconds)\n * @return {RepresentationInformation[]}\n *         List of objects containing Representation information\n */\n\nconst inheritAttributes = (mpd, options = {}) => {\n  const {\n    manifestUri = '',\n    NOW = Date.now(),\n    clientOffset = 0,\n    // TODO: For now, we are expecting an eventHandler callback function\n    // to be passed into the mpd parser as an option.\n    // In the future, we should enable stream parsing by using the Stream class from vhs-utils.\n    // This will support new features including a standardized event handler.\n    // See the m3u8 parser for examples of how stream parsing is currently used for HLS parsing.\n    // https://github.com/videojs/vhs-utils/blob/88d6e10c631e57a5af02c5a62bc7376cd456b4f5/src/stream.js#L9\n    eventHandler = function () {}\n  } = options;\n  const periodNodes = findChildren(mpd, 'Period');\n\n  if (!periodNodes.length) {\n    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\n  }\n\n  const locations = findChildren(mpd, 'Location');\n  const mpdAttributes = parseAttributes(mpd);\n  const mpdBaseUrls = buildBaseUrls([{\n    baseUrl: manifestUri\n  }], findChildren(mpd, 'BaseURL'));\n  const contentSteeringNodes = findChildren(mpd, 'ContentSteering'); // See DASH spec section 5.3.1.2, Semantics of MPD element. Default type to 'static'.\n\n  mpdAttributes.type = mpdAttributes.type || 'static';\n  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\n  mpdAttributes.NOW = NOW;\n  mpdAttributes.clientOffset = clientOffset;\n\n  if (locations.length) {\n    mpdAttributes.locations = locations.map(getContent);\n  }\n\n  const periods = []; // Since toAdaptationSets acts on individual periods right now, the simplest approach to\n  // adding properties that require looking at prior periods is to parse attributes and add\n  // missing ones before toAdaptationSets is called. If more such properties are added, it\n  // may be better to refactor toAdaptationSets.\n\n  periodNodes.forEach((node, index) => {\n    const attributes = parseAttributes(node); // Use the last modified prior period, as it may contain added information necessary\n    // for this period.\n\n    const priorPeriod = periods[index - 1];\n    attributes.start = getPeriodStart({\n      attributes,\n      priorPeriodAttributes: priorPeriod ? priorPeriod.attributes : null,\n      mpdType: mpdAttributes.type\n    });\n    periods.push({\n      node,\n      attributes\n    });\n  });\n  return {\n    locations: mpdAttributes.locations,\n    contentSteeringInfo: generateContentSteeringInformation(contentSteeringNodes, eventHandler),\n    // TODO: There are occurences where this `representationInfo` array contains undesired\n    // duplicates. This generally occurs when there are multiple BaseURL nodes that are\n    // direct children of the MPD node. When we attempt to resolve URLs from a combination of the\n    // parent BaseURL and a child BaseURL, and the value does not resolve,\n    // we end up returning the child BaseURL multiple times.\n    // We need to determine a way to remove these duplicates in a safe way.\n    // See: https://github.com/videojs/mpd-parser/pull/17#discussion_r162750527\n    representationInfo: flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls))),\n    eventStream: flatten(periods.map(toEventStream))\n  };\n};\n\nconst stringToMpdXml = manifestString => {\n  if (manifestString === '') {\n    throw new Error(errors.DASH_EMPTY_MANIFEST);\n  }\n\n  const parser = new DOMParser();\n  let xml;\n  let mpd;\n\n  try {\n    xml = parser.parseFromString(manifestString, 'application/xml');\n    mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\n  } catch (e) {// ie 11 throws on invalid xml\n  }\n\n  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\n    throw new Error(errors.DASH_INVALID_XML);\n  }\n\n  return mpd;\n};\n\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} mpd\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\nconst parseUTCTimingScheme = mpd => {\n  const UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\n\n  if (!UTCTimingNode) {\n    return null;\n  }\n\n  const attributes = parseAttributes(UTCTimingNode);\n\n  switch (attributes.schemeIdUri) {\n    case 'urn:mpeg:dash:utc:http-head:2014':\n    case 'urn:mpeg:dash:utc:http-head:2012':\n      attributes.method = 'HEAD';\n      break;\n\n    case 'urn:mpeg:dash:utc:http-xsdate:2014':\n    case 'urn:mpeg:dash:utc:http-iso:2014':\n    case 'urn:mpeg:dash:utc:http-xsdate:2012':\n    case 'urn:mpeg:dash:utc:http-iso:2012':\n      attributes.method = 'GET';\n      break;\n\n    case 'urn:mpeg:dash:utc:direct:2014':\n    case 'urn:mpeg:dash:utc:direct:2012':\n      attributes.method = 'DIRECT';\n      attributes.value = Date.parse(attributes.value);\n      break;\n\n    case 'urn:mpeg:dash:utc:http-ntp:2014':\n    case 'urn:mpeg:dash:utc:ntp:2014':\n    case 'urn:mpeg:dash:utc:sntp:2014':\n    default:\n      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\n  }\n\n  return attributes;\n};\n\nconst VERSION = version;\n/*\n * Given a DASH manifest string and options, parses the DASH manifest into an object in the\n * form outputed by m3u8-parser and accepted by videojs/http-streaming.\n *\n * For live DASH manifests, if `previousManifest` is provided in options, then the newly\n * parsed DASH manifest will have its media sequence and discontinuity sequence values\n * updated to reflect its position relative to the prior manifest.\n *\n * @param {string} manifestString - the DASH manifest as a string\n * @param {options} [options] - any options\n *\n * @return {Object} the manifest object\n */\n\nconst parse = (manifestString, options = {}) => {\n  const parsedManifestInfo = inheritAttributes(stringToMpdXml(manifestString), options);\n  const playlists = toPlaylists(parsedManifestInfo.representationInfo);\n  return toM3u8({\n    dashPlaylists: playlists,\n    locations: parsedManifestInfo.locations,\n    contentSteering: parsedManifestInfo.contentSteeringInfo,\n    sidxMapping: options.sidxMapping,\n    previousManifest: options.previousManifest,\n    eventStream: parsedManifestInfo.eventStream\n  });\n};\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} manifestString\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\n\nconst parseUTCTiming = manifestString => parseUTCTimingScheme(stringToMpdXml(manifestString));\n\nexport { VERSION, addSidxSegmentsToPlaylist$1 as addSidxSegmentsToPlaylist, generateSidxKey, inheritAttributes, parse, parseUTCTiming, stringToMpdXml, toM3u8, toPlaylists };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}